module Test.TestCases (prettyTestReference) where

import Language.Haskell.Exts.Annotated
import Data.List (find)

prettyTestReference :: PPLayout -> String -> Maybe (Module SrcSpanInfo)
prettyTestReference layout fileName = find (\x -> fileName == takeFileName x) $ testCases layout
  where
    takeFileName x = srcSpanFilename . srcInfoSpan $ ann x
    testCases :: PPLayout -> [Module SrcSpanInfo]
    testCases PPOffsideRule = offsideRule
    testCases PPSemiColon   = semiColonRule
    testCases PPInLine      = inlineRule
    testCases _             = noLayoutRule

offsideRule   = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 2 1) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 3 1) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 3 1 3 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 2 14) [SrcSpan "Ex1.hs" 2 3 2 8]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 14) [SrcSpan "Ex1.hs" 2 9 2 9, SrcSpan "Ex1.hs" 2 14 2 14]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 14) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 10) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 10) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 14) [SrcSpan "Ex1.hs" 2 11 2 12]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 14) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 14) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 4 1) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 3 16) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 5 3 16) [SrcSpan "SimpleDeriving.hs" 3 5 3 13]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 3 1) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 3 1 3 1]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 2 1) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 2 1) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 2 1 2 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ]
semiColonRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 2 1) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 3 1) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 3 1 3 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 2 18) [SrcSpan "Ex1.hs" 2 3 2 8]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 18) [SrcSpan "Ex1.hs" 2 9 2 10, SrcSpan "Ex1.hs" 2 17 2 18]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 16) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 12) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 12) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 16) [SrcSpan "Ex1.hs" 2 13 2 14]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 2 15 2 16) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 2 15 2 16) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 4 1) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 3 16) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 5 3 16) [SrcSpan "SimpleDeriving.hs" 3 5 3 13]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 14 3 16) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 3 1) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 3 1 3 1]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 2 1) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 2 1) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 2 1 2 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 36) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ]
inlineRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 10) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 10 1 10]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 25) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 25 1 25]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 24) [SrcSpan "Ex1.hs" 1 9 1 14]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 1 15 1 24) [SrcSpan "Ex1.hs" 1 15 1 16, SrcSpan "Ex1.hs" 1 23 1 24]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 22) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 19 1 22) [SrcSpan "Ex1.hs" 1 19 1 20]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 2 24) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 2 24 2 24]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 23) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 12 2 23) [SrcSpan "SimpleDeriving.hs" 2 12 2 20]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 2 24) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 2 24 2 24]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 29) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 29 1 29]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 37) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 1 37 1 37]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 36) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ]
noLayoutRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 10) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 10 1 10]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 25) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 25 1 25]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 24) [SrcSpan "Ex1.hs" 1 9 1 14]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 1 15 1 24) [SrcSpan "Ex1.hs" 1 15 1 16, SrcSpan "Ex1.hs" 1 23 1 24]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 22) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 19 1 22) [SrcSpan "Ex1.hs" 1 19 1 20]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 24) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 24 1 24]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 23) [SrcSpan "SimpleDeriving.hs" 1 8 1 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 6 1 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 6 1 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 12 1 23) [SrcSpan "SimpleDeriving.hs" 1 12 1 20]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 24) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 24 1 24]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 23) [SrcSpan "EmptyContext.hs" 1 11 1 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 14 1 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 14 1 19) [SrcSpan "EmptyContext.hs" 1 14 1 15, SrcSpan "EmptyContext.hs" 1 15 1 16, SrcSpan "EmptyContext.hs" 1 17 1 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 22 1 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 22 1 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 29) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 29 1 29]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 37) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 1 37 1 37]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 36) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ]
