module Test.TestCases (prettyTestReference) where

import Language.Haskell.Exts.Annotated
import Data.List (find)

prettyTestReference :: PPLayout -> String -> Maybe (Module SrcSpanInfo)
prettyTestReference layout fileName = find (\x -> fileName == takeFileName x) $ testCases layout
  where
    takeFileName x = srcSpanFilename . srcInfoSpan $ ann x
    testCases :: PPLayout -> [Module SrcSpanInfo]
    testCases PPOffsideRule = offsideRule
    testCases PPSemiColon   = semiColonRule
    testCases PPInLine      = inlineRule
    testCases _             = noLayoutRule

offsideRule   = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 2 1) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 2 1 2 1, SrcSpan "WithKeyword.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 3 1) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 3 1 3 1, SrcSpan "Ex1.hs" 3 1 3 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 3 0) [SrcSpan "Ex1.hs" 2 3 2 8]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 3 0) [SrcSpan "Ex1.hs" 2 9 2 9, SrcSpan "Ex1.hs" 3 1 3 0]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 14) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 10) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 10) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 14) [SrcSpan "Ex1.hs" 2 11 2 12]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 14) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 14) []) 1 "1"))) Nothing]))]
  -- SimpleDeriving.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 4 1) [SrcSpan "SimpleDeriving.hs" 2 1 2 1, SrcSpan "SimpleDeriving.hs" 2 1 2 1, SrcSpan "SimpleDeriving.hs" 2 1 2 1, SrcSpan "SimpleDeriving.hs" 4 1 4 1, SrcSpan "SimpleDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 3 14) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 3 3 14) [SrcSpan "SimpleDeriving.hs" 3 3 3 11]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 3 1) [SrcSpan "EmptyContext.hs" 2 1 2 1, SrcSpan "EmptyContext.hs" 2 1 2 1, SrcSpan "EmptyContext.hs" 2 1 2 1, SrcSpan "EmptyContext.hs" 3 1 3 1, SrcSpan "EmptyContext.hs" 3 1 3 1]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 2 1) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 2 1 2 1, SrcSpan "ListComp1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 2 1) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 2 1 2 1, SrcSpan "Hyphen.hs" 2 1 2 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 2 1) [SrcSpan "EmptyAnn.hs" 1 1 1 1, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1]) Nothing [AnnModulePragma (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 1 38) [SrcSpan "EmptyAnn.hs" 1 1 1 8, SrcSpan "EmptyAnn.hs" 1 35 1 38]) (Ann (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 34) []) (Ident (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 12) []) "foo") (Lit (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) (String (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) "Hlint: ignore Test4" "Hlint: ignore Test4")))] [] []
  ,Module (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 3 1) [SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 2 1 2 1, SrcSpan "EmptyList.hs" 3 1 3 1, SrcSpan "EmptyList.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 1 23) [SrcSpan "EmptyList.hs" 1 1 1 7, SrcSpan "EmptyList.hs" 1 18 1 23]) (ModuleName (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 8 1 17) []) "EmptyList") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 1 2 12) []) (PVar (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 1 2 7) []) (Ident (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 1 2 7) []) "eAttrs")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 8 2 12) [SrcSpan "EmptyList.hs" 2 8 2 9]) (List (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 10 2 12) [SrcSpan "EmptyList.hs" 2 10 2 11, SrcSpan "EmptyList.hs" 2 11 2 12]) [])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 2 1) [SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 2 1 2 1, SrcSpan "ImportSymbol.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 1 36) [SrcSpan "ImportSymbol.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 8 1 21) []) "Data.Generics", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (ImportSpecList (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 22 1 36) [SrcSpan "ImportSymbol.hs" 1 22 1 28, SrcSpan "ImportSymbol.hs" 1 29 1 30, SrcSpan "ImportSymbol.hs" 1 35 1 36]) True [IAbs (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) (Symbol (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) ":*:")])}] []
  ,Module (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 5 1) [SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 5 1 5 1, SrcSpan "IndentedWhere.hs" 5 1 5 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 5 0) [SrcSpan "IndentedWhere.hs" 2 3 2 8]) [Match (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 5 0) [SrcSpan "IndentedWhere.hs" 2 3 2 8]) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 2) []) "f") [PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 5 1 8) [SrcSpan "IndentedWhere.hs" 1 5 1 6]) (Var (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) "g")))) (Just (BDecls (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 9 5 0) [SrcSpan "IndentedWhere.hs" 3 9 3 9, SrcSpan "IndentedWhere.hs" 4 9 4 9, SrcSpan "IndentedWhere.hs" 5 1 5 0]) [TypeSig (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 9 3 17) [SrcSpan "IndentedWhere.hs" 3 11 3 13]) [Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 9 3 10) []) "g"] (TyCon (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 14 3 17) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 14 3 17) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 14 3 17) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 9 4 14) []) (PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 9 4 10) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 9 4 10) []) "g")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 11 4 14) [SrcSpan "IndentedWhere.hs" 4 11 4 12]) (Lit (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 13 4 14) []) (Int (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 13 4 14) []) 0 "0"))) Nothing]))]]
  ,Module (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 2 1) [SrcSpan "LanguagePragma.hs" 1 1 1 1, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 1 45) [SrcSpan "LanguagePragma.hs" 1 1 1 13, SrcSpan "LanguagePragma.hs" 1 27 1 28, SrcSpan "LanguagePragma.hs" 1 42 1 45]) [Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 14 1 27) []) "PatternGuards",Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 29 1 41) []) "ViewPatterns"]] [] []
  ,Module (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 3 1) [SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 2 1 2 1, SrcSpan "ParenFunBind.hs" 3 1 3 1, SrcSpan "ParenFunBind.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 1 26) [SrcSpan "ParenFunBind.hs" 1 1 1 7, SrcSpan "ParenFunBind.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 8 1 20) []) "ParenFunBind") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 1 2 16) []) [Match (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 1 2 16) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 1 2 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 5 2 6) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 5 2 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 9 2 16) [SrcSpan "ParenFunBind.hs" 2 9 2 10]) (InfixApp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 16) []) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 12) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 12) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 12) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (Symbol (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) "+"))) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) "y"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 3 1) [SrcSpan "NPlusK.hs" 1 1 1 1, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 3 1 3 1, SrcSpan "NPlusK.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 1 32) [SrcSpan "NPlusK.hs" 1 1 1 13, SrcSpan "NPlusK.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 14 1 28) []) "NPlusKPatterns"]] [] [FunBind (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) [Match (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 2) []) "f") [PParen (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 3 2 10) [SrcSpan "NPlusK.hs" 2 3 2 4, SrcSpan "NPlusK.hs" 2 9 2 10]) (PNPlusK (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 9) [SrcSpan "NPlusK.hs" 2 6 2 7, SrcSpan "NPlusK.hs" 2 8 2 9]) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 5) []) "n") 3)] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 11 2 14) [SrcSpan "NPlusK.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) "n")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 3 1) [SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 2 1 2 1, SrcSpan "QualifiedDot.hs" 3 1 3 1, SrcSpan "QualifiedDot.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 1 26) [SrcSpan "QualifiedDot.hs" 1 1 1 7, SrcSpan "QualifiedDot.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 8 1 20) []) "QualifiedDot") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 1 2 22) []) (PVar (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 1 2 8) []) (Ident (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 1 2 8) []) "twoDots")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 9 2 22) [SrcSpan "QualifiedDot.hs" 2 9 2 10]) (Var (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 22) [SrcSpan "QualifiedDot.hs" 2 11 2 12, SrcSpan "QualifiedDot.hs" 2 12 2 21, SrcSpan "QualifiedDot.hs" 2 21 2 22]) (Qual (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 22) [SrcSpan "QualifiedDot.hs" 2 11 2 12, SrcSpan "QualifiedDot.hs" 2 12 2 21, SrcSpan "QualifiedDot.hs" 2 21 2 22]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 22) [SrcSpan "QualifiedDot.hs" 2 11 2 12, SrcSpan "QualifiedDot.hs" 2 12 2 21, SrcSpan "QualifiedDot.hs" 2 21 2 22]) "Prelude") (Symbol (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 22) [SrcSpan "QualifiedDot.hs" 2 11 2 12, SrcSpan "QualifiedDot.hs" 2 12 2 21, SrcSpan "QualifiedDot.hs" 2 21 2 22]) ".")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 3 1) [SrcSpan "TupleSections.hs" 1 1 1 1, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 3 1 3 1, SrcSpan "TupleSections.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 1 31) [SrcSpan "TupleSections.hs" 1 1 1 13, SrcSpan "TupleSections.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 14 1 27) []) "TupleSections"]] [] [FunBind (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 19) []) [Match (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 19) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 7 2 19) [SrcSpan "TupleSections.hs" 2 7 2 8]) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 19) []) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 17) []) (TupleSection (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 15) [SrcSpan "TupleSections.hs" 2 9 2 10, SrcSpan "TupleSections.hs" 2 11 2 12, SrcSpan "TupleSections.hs" 2 13 2 14, SrcSpan "TupleSections.hs" 2 14 2 15]) Boxed [Just (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) 1 "1")),Nothing,Nothing]) (Var (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 16 2 17) []) (UnQual (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 16 2 17) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 16 2 17) []) "x")))) (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 18 2 19) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 18 2 19) []) 3 "3")))) Nothing]]
  -- EmptyInstance.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 1 6 1) [SrcSpan "EmptyInstance.hs" 2 1 2 1, SrcSpan "EmptyInstance.hs" 2 1 2 1, SrcSpan "EmptyInstance.hs" 2 1 2 1, SrcSpan "EmptyInstance.hs" 4 1 4 1, SrcSpan "EmptyInstance.hs" 5 1 5 1, SrcSpan "EmptyInstance.hs" 6 1 6 1, SrcSpan "EmptyInstance.hs" 6 1 6 1]) Nothing [] [] [InstDecl (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 1 3 1) [SrcSpan "EmptyInstance.hs" 2 1 2 9, SrcSpan "EmptyInstance.hs" 2 27 2 32, SrcSpan "EmptyInstance.hs" 3 1 3 1, SrcSpan "EmptyInstance.hs" 3 1 3 1, SrcSpan "EmptyInstance.hs" 3 1 3 0]) Nothing (IHead (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) "Traversable")) [TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) "Tree"))]) (Just []),TypeSig (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 9) [SrcSpan "EmptyInstance.hs" 4 3 4 5]) [Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 2) []) "x"] (TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 6) []) (PVar (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 3 5 6) [SrcSpan "EmptyInstance.hs" 5 3 5 4]) (Lit (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) (Int (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 3 1) [SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 2 1 2 1, SrcSpan "SCCPragmas.hs" 3 1 3 1, SrcSpan "SCCPragmas.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 1 24) [SrcSpan "SCCPragmas.hs" 1 1 1 7, SrcSpan "SCCPragmas.hs" 1 19 1 24]) (ModuleName (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 8 1 18) []) "SCCPragmas") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 1 2 27) []) (PVar (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 1 2 2) []) (Ident (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 1 2 2) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 27) [SrcSpan "SCCPragmas.hs" 2 3 2 4]) (SCCPragma (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 5 2 27) [SrcSpan "SCCPragmas.hs" 2 13 2 21, SrcSpan "SCCPragmas.hs" 2 22 2 25]) "wibble" (Lit (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 26 2 27) []) (Int (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 26 2 27) []) 3 "3")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 5 1) [SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 3 1 3 1, SrcSpan "SingleClassAsst.hs" 4 1 4 1, SrcSpan "SingleClassAsst.hs" 5 1 5 1, SrcSpan "SingleClassAsst.hs" 5 1 5 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 1 18) [SrcSpan "SingleClassAsst.hs" 1 1 1 7, SrcSpan "SingleClassAsst.hs" 1 13 1 18]) (ModuleName (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 8 1 12) []) "Test") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 1 3 24) [SrcSpan "SingleClassAsst.hs" 3 5 3 7]) [Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 1 3 4) []) "foo"] (TyForall (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 8 3 24) []) Nothing (Just (CxParen (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 8 3 17) [SrcSpan "SingleClassAsst.hs" 3 8 3 9, SrcSpan "SingleClassAsst.hs" 3 13 3 14, SrcSpan "SingleClassAsst.hs" 3 15 3 17]) (CxSingle (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 9 3 13) []) (ClassA (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 9 3 13) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 9 3 11) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 9 3 11) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 12 3 13) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 12 3 13) []) "a")])))) (TyFun (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 18 3 24) [SrcSpan "SingleClassAsst.hs" 3 20 3 22]) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 18 3 19) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 18 3 19) []) "a")) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 23 3 24) []) "a")))),FunBind (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 1 4 10) []) [Match (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 1 4 10) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 1 4 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 5 4 6) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 5 4 6) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 7 4 10) [SrcSpan "SingleClassAsst.hs" 4 7 4 8]) (Var (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 9 4 10) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 9 4 10) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 9 4 10) []) "x")))) Nothing]]
  -- UnindentedPragmaClose.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 5 1) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 1, SrcSpan "UnindentedPragmaClose.hs" 3 1 3 1, SrcSpan "UnindentedPragmaClose.hs" 3 1 3 1, SrcSpan "UnindentedPragmaClose.hs" 3 1 3 1, SrcSpan "UnindentedPragmaClose.hs" 4 1 4 1, SrcSpan "UnindentedPragmaClose.hs" 5 1 5 1, SrcSpan "UnindentedPragmaClose.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 1 39) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 13, SrcSpan "UnindentedPragmaClose.hs" 1 36 1 39]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 14 1 35) []) "MultiParamTypeClasses"]] [] [TypeSig (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 9) [SrcSpan "UnindentedPragmaClose.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 2) []) "f"] (TyCon (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (UnQual (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 6) []) (PVar (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 3 4 6) [SrcSpan "UnindentedPragmaClose.hs" 4 3 4 4]) (Lit (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) (Int (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) 4 "4"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 2 1) [SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 2 1 2 1, SrcSpan "Testing.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 17) []) (PVar (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Testing.hs" 1 6 1 17) [SrcSpan "Testing.hs" 1 6 1 7]) (App (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 17) []) (Var (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (UnQual (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) "return"))) (Con (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (Special (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (UnitCon (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17])))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 2 1) [SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 2 1 2 1, SrcSpan "Bug.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 1 23) [SrcSpan "Bug.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "Bug.hs" 1 8 1 23) []) "Test.QuickCheck", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing}] []
  -- NestedAsPat.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 3 1) [SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 2 1 2 1, SrcSpan "NestedAsPat.hs" 3 1 3 1, SrcSpan "NestedAsPat.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 1 25) [SrcSpan "NestedAsPat.hs" 1 1 1 7, SrcSpan "NestedAsPat.hs" 1 20 1 25]) (ModuleName (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 8 1 19) []) "NestedAsPat") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 1 2 37) []) [Match (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 1 2 37) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 1 2 12) []) "nestedAsPat") [PList (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 13 2 25) [SrcSpan "NestedAsPat.hs" 2 13 2 14, SrcSpan "NestedAsPat.hs" 2 24 2 25]) [PAsPat (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 14 2 24) [SrcSpan "NestedAsPat.hs" 2 15 2 16]) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 14 2 15) []) "x") (PParen (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 16 2 24) [SrcSpan "NestedAsPat.hs" 2 16 2 17, SrcSpan "NestedAsPat.hs" 2 23 2 24]) (PApp (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 17 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 17 2 21) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 17 2 21) []) "Just")) [PWildCard (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 22 2 23) [])]))]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 26 2 37) [SrcSpan "NestedAsPat.hs" 2 26 2 27]) (Var (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 28 2 37) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 28 2 37) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 28 2 37) []) "undefined")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 7 1) [SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 3 1 3 1, SrcSpan "HexPrec.hs" 4 1 4 1, SrcSpan "HexPrec.hs" 6 1 6 1, SrcSpan "HexPrec.hs" 7 1 7 1, SrcSpan "HexPrec.hs" 7 1 7 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 1 21) [SrcSpan "HexPrec.hs" 1 1 1 7, SrcSpan "HexPrec.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 8 1 15) []) "HexPrec") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 1 3 26) [SrcSpan "HexPrec.hs" 3 6 3 8]) [Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 1 3 5) [SrcSpan "HexPrec.hs" 3 1 3 2, SrcSpan "HexPrec.hs" 3 2 3 4, SrcSpan "HexPrec.hs" 3 4 3 5]) "%%"] (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 9 3 26) [SrcSpan "HexPrec.hs" 3 13 3 15]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 9 3 12) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 9 3 12) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 9 3 12) []) "Int"))) (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 16 3 26) [SrcSpan "HexPrec.hs" 3 20 3 22]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 16 3 19) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 16 3 19) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 16 3 19) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 23 3 26) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 23 3 26) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 23 3 26) []) "Int"))))),FunBind (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 1 4 11) []) [InfixMatch (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 1 4 11) []) (PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 1 4 2) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 5) []) "%%") [PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 6 4 7) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 6 4 7) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 8 4 11) [SrcSpan "HexPrec.hs" 4 8 4 9]) (Lit (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 10 4 11) []) (Int (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 10 4 11) []) 0 "0"))) Nothing],InfixDecl (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 1 6 12) [SrcSpan "HexPrec.hs" 6 8 6 9]) (AssocLeft (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 1 6 7) [])) (Just 2) [VarOp (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 10 6 12) []) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 10 6 12) []) "%%")]]
  ,Module (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 5 1) [SrcSpan "Rank2Types.hs" 1 1 1 1, SrcSpan "Rank2Types.hs" 3 1 3 1, SrcSpan "Rank2Types.hs" 3 1 3 1, SrcSpan "Rank2Types.hs" 3 1 3 1, SrcSpan "Rank2Types.hs" 4 1 4 1, SrcSpan "Rank2Types.hs" 5 1 5 1, SrcSpan "Rank2Types.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 1 28) [SrcSpan "Rank2Types.hs" 1 1 1 13, SrcSpan "Rank2Types.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 14 1 24) []) "Rank2Types"]] [] [TypeSig (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 37) [SrcSpan "Rank2Types.hs" 3 6 3 8]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 5) []) "test"] (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 37) [SrcSpan "Rank2Types.hs" 3 13 3 15]) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) "Int"))) (TyForall (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 16 3 37) [SrcSpan "Rank2Types.hs" 3 16 3 22, SrcSpan "Rank2Types.hs" 3 25 3 26]) (Just [UnkindedVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) "a")]) Nothing (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 37) [SrcSpan "Rank2Types.hs" 3 31 3 33]) (TyList (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 30) [SrcSpan "Rank2Types.hs" 3 27 3 28, SrcSpan "Rank2Types.hs" 3 29 3 30]) (TyVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) "a"))) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) "Int")))))),FunBind (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) [Match (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 5) []) "test") [PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 6 4 7) []),PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 8 4 9) [])] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 10 4 13) [SrcSpan "Rank2Types.hs" 4 10 4 11]) (Lit (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) (Int (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) 1 "1"))) Nothing]]
  -- ReadP.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 4 1) [SrcSpan "ReadP.hs" 1 1 1 1, SrcSpan "ReadP.hs" 3 1 3 1, SrcSpan "ReadP.hs" 3 1 3 1, SrcSpan "ReadP.hs" 3 1 3 1, SrcSpan "ReadP.hs" 4 1 4 1, SrcSpan "ReadP.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 1 31) [SrcSpan "ReadP.hs" 1 1 1 13, SrcSpan "ReadP.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 51) [SrcSpan "ReadP.hs" 3 17 3 18]) (NewType (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 14) []) "ReadP") [UnkindedVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 20) []) "R") [UnBangedTy (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyInfix (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 50) []) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 30) []) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) "forall")) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) "b"))) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) (Symbol (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) ".")) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 50) [SrcSpan "ReadP.hs" 3 44 3 46]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 43) [SrcSpan "ReadP.hs" 3 33 3 34, SrcSpan "ReadP.hs" 3 42 3 43]) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 42) [SrcSpan "ReadP.hs" 3 36 3 38]) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) "a")) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 42) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) "b"))))) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 50) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) "b"))))))])] Nothing]
  -- DataHeadParen.hs different from standart
  ,Module (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 5 1) [SrcSpan "DataHeadParen.hs" 1 1 1 1, SrcSpan "DataHeadParen.hs" 2 1 2 1, SrcSpan "DataHeadParen.hs" 2 1 2 1, SrcSpan "DataHeadParen.hs" 4 1 4 1, SrcSpan "DataHeadParen.hs" 5 1 5 1, SrcSpan "DataHeadParen.hs" 5 1 5 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 1 2 27) [SrcSpan "DataHeadParen.hs" 2 1 2 7, SrcSpan "DataHeadParen.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 8 2 21) []) "DataHeadParen") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 1 31) [SrcSpan "DataHeadParen.hs" 1 1 1 13, SrcSpan "DataHeadParen.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 1 4 22) [SrcSpan "DataHeadParen.hs" 4 17 4 18]) (DataType (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 1 4 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 6 4 16) [SrcSpan "DataHeadParen.hs" 4 6 4 7, SrcSpan "DataHeadParen.hs" 4 7 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 10]) (Symbol (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 6 4 10) [SrcSpan "DataHeadParen.hs" 4 6 4 7, SrcSpan "DataHeadParen.hs" 4 7 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 10]) ":<") [UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 11 4 13) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 11 4 13) []) "a1"),UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 14 4 16) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 14 4 16) []) "a2")]) [QualConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 19 4 22) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 19 4 22) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 19 4 22) []) "Foo") [])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 4 1) [SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 2 57 2 57, SrcSpan "RecordInfixSelector.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 57) [SrcSpan "RecordInfixSelector.hs" 2 30 2 31]) (DataType (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) "RecordWithInfixSelector") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 36) []) "Cons") [FieldDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 56) [SrcSpan "RecordInfixSelector.hs" 2 43 2 45]) [Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 42) [SrcSpan "RecordInfixSelector.hs" 2 38 2 39, SrcSpan "RecordInfixSelector.hs" 2 39 2 41, SrcSpan "RecordInfixSelector.hs" 2 41 2 42]) "<>"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyFun (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) "Int")))))])] Nothing,PatBind (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 30) []) (PVar (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) "idRecord")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 10 3 30) [SrcSpan "RecordInfixSelector.hs" 3 10 3 11]) (RecConstr (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 30) [SrcSpan "RecordInfixSelector.hs" 3 17 3 18, SrcSpan "RecordInfixSelector.hs" 3 29 3 30]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) "Cons")) [FieldUpdate (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 28) [SrcSpan "RecordInfixSelector.hs" 3 24 3 25]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) (Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) "<>")) (Var (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) "id")))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 6 1) [SrcSpan "GadtDeriving.hs" 1 1 1 1, SrcSpan "GadtDeriving.hs" 1 23 1 23, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 6 1 6 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 1 23) [SrcSpan "GadtDeriving.hs" 1 1 1 13, SrcSpan "GadtDeriving.hs" 1 20 1 23]) [Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 14 1 19) []) "GADTs"]] [] [GDataDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 5 33) [SrcSpan "GadtDeriving.hs" 3 10 3 15, SrcSpan "GadtDeriving.hs" 4 9 4 9, SrcSpan "GadtDeriving.hs" 4 26 4 26]) (DataType (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) "Foo") []) Nothing [GadtDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 9 4 26) [SrcSpan "GadtDeriving.hs" 4 13 4 15]) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 9 4 12) []) "Foo") (TyFun (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 16 4 26) [SrcSpan "GadtDeriving.hs" 4 20 4 22]) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 16 4 19) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 16 4 19) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 16 4 19) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 23 4 26) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 23 4 26) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 23 4 26) []) "Foo"))))] (Just (Deriving (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 5 5 33) [SrcSpan "GadtDeriving.hs" 5 5 5 13, SrcSpan "GadtDeriving.hs" 5 14 5 15, SrcSpan "GadtDeriving.hs" 5 17 5 18, SrcSpan "GadtDeriving.hs" 5 22 5 23, SrcSpan "GadtDeriving.hs" 5 32 5 33]) [IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) "Eq")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) "Ord")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) "Typeable")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 3 1) [SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 2 1 2 1, SrcSpan "LinePragma.hs" 2 1 2 1, SrcSpan "LinePragma.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 1 21) [SrcSpan "LinePragma.hs" 1 1 1 7, SrcSpan "LinePragma.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 8 1 15) []) "Algebra") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 1 2 14) []) [Match (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 1 2 14) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 1 2 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 5 2 8) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 5 2 8) []) "bar")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 9 2 14) [SrcSpan "LinePragma.hs" 2 9 2 10]) (Var (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 11 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 11 2 14) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 11 2 14) []) "bar")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 8 1) [SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 2 15 2 15, SrcSpan "Pragma.hs" 8 1 8 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 15) [SrcSpan "Pragma.hs" 2 10 2 11]) (DataType (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) "Bar") []) [QualConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) "Bar") [])] Nothing,InstDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 4 1 7 30) [SrcSpan "Pragma.hs" 4 1 4 9, SrcSpan "Pragma.hs" 4 17 4 22, SrcSpan "Pragma.hs" 5 9 5 9, SrcSpan "Pragma.hs" 6 28 6 28, SrcSpan "Pragma.hs" 7 30 7 30]) Nothing (IHead (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) "Eq")) [TyCon (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) "Bar"))]) (Just [InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 6 9 6 28) [SrcSpan "Pragma.hs" 6 9 6 19, SrcSpan "Pragma.hs" 6 25 6 28]) (InlineSig (SrcSpanInfo (SrcSpan "Pragma.hs" 6 9 6 28) [SrcSpan "Pragma.hs" 6 9 6 19, SrcSpan "Pragma.hs" 6 25 6 28]) True Nothing (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 6 20 6 24) [SrcSpan "Pragma.hs" 6 20 6 21, SrcSpan "Pragma.hs" 6 21 6 23, SrcSpan "Pragma.hs" 6 23 6 24]) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 6 20 6 24) [SrcSpan "Pragma.hs" 6 20 6 21, SrcSpan "Pragma.hs" 6 21 6 23, SrcSpan "Pragma.hs" 6 23 6 24]) "=="))),InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 7 9 7 30) []) (FunBind (SrcSpanInfo (SrcSpan "Pragma.hs" 7 9 7 30) []) [InfixMatch (SrcSpanInfo (SrcSpan "Pragma.hs" 7 9 7 30) []) (PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 7 9 7 10) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 9 7 10) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 13) []) "==") [PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 7 14 7 15) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 14 7 15) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Pragma.hs" 7 16 7 30) [SrcSpan "Pragma.hs" 7 16 7 17]) (App (SrcSpanInfo (SrcSpan "Pragma.hs" 7 18 7 30) []) (Var (SrcSpanInfo (SrcSpan "Pragma.hs" 7 18 7 23) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 7 18 7 23) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 18 7 23) []) "error"))) (Lit (SrcSpanInfo (SrcSpan "Pragma.hs" 7 24 7 30) []) (String (SrcSpanInfo (SrcSpan "Pragma.hs" 7 24 7 30) []) "here" "here")))) Nothing])])]
  ,Module (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 5 1) [SrcSpan "FamilyKindSig.hs" 1 1 1 1, SrcSpan "FamilyKindSig.hs" 1 30 1 30, SrcSpan "FamilyKindSig.hs" 3 1 3 1, SrcSpan "FamilyKindSig.hs" 3 1 3 1, SrcSpan "FamilyKindSig.hs" 5 1 5 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 1 2 27) [SrcSpan "FamilyKindSig.hs" 2 1 2 7, SrcSpan "FamilyKindSig.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 8 2 21) []) "FamilyKindSig") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 1 30) [SrcSpan "FamilyKindSig.hs" 1 1 1 13, SrcSpan "FamilyKindSig.hs" 1 27 1 30]) [Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 14 1 26) []) "TypeFamilies"]] [] [TypeFamDecl (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 1 4 38) [SrcSpan "FamilyKindSig.hs" 4 1 4 5, SrcSpan "FamilyKindSig.hs" 4 6 4 12]) (DHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 13 4 38) []) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 13 4 24) []) "WithKindSig") [KindedVar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 25 4 38) [SrcSpan "FamilyKindSig.hs" 4 25 4 26, SrcSpan "FamilyKindSig.hs" 4 28 4 30, SrcSpan "FamilyKindSig.hs" 4 37 4 38]) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 26 4 27) []) "a") (KindFn (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 31 4 37) [SrcSpan "FamilyKindSig.hs" 4 33 4 35]) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 31 4 32) [])) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 36 4 37) [])))]) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 4 1) [SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 3 44) [SrcSpan "GhcDeriving.hs" 2 25 2 26]) (NewType (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 2 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 22) []) "CodeGenModule") [UnkindedVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 30) []) "CGM") [UnBangedTy (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyParen (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 52) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 50) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 47) []) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) "StateT"))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) "CGMState")))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) "IO")))) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) "a"))))])] (Just (Deriving (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 3 3 44) [SrcSpan "GhcDeriving.hs" 3 3 3 11, SrcSpan "GhcDeriving.hs" 3 12 3 13, SrcSpan "GhcDeriving.hs" 3 18 3 19, SrcSpan "GhcDeriving.hs" 3 34 3 35, SrcSpan "GhcDeriving.hs" 3 43 3 44]) [IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) "Monad")) [],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 34) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 30) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 30) []) "MonadState")) [TyList (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 31 3 34) [SrcSpan "GhcDeriving.hs" 3 31 3 32, SrcSpan "GhcDeriving.hs" 3 33 3 34]) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 32 3 33) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 32 3 33) []) "s"))],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) "MonadIO")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 4 1) [SrcSpan "PackageImport.hs" 1 1 1 1, SrcSpan "PackageImport.hs" 1 32 1 32, SrcSpan "PackageImport.hs" 2 1 2 1, SrcSpan "PackageImport.hs" 2 48 2 48, SrcSpan "PackageImport.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 1 32) [SrcSpan "PackageImport.hs" 1 1 1 13, SrcSpan "PackageImport.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 14 1 28) []) "PackageImports"]] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 1 2 48) [SrcSpan "PackageImport.hs" 2 1 2 7, SrcSpan "PackageImport.hs" 2 8 2 26]), importModule = ModuleName (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 27 2 48) []) "Language.Haskell.Exts", importQualified = False, importSrc = False, importPkg = Just "haskell-src-exts", importAs = Nothing, importSpecs = Nothing}] [PatBind (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 17) []) (PVar (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 6 3 17) [SrcSpan "PackageImport.hs" 3 6 3 7]) (Var (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (UnQual (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 3 1) [SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 2 1 2 1, SrcSpan "GroupKeyword.hs" 2 1 2 1, SrcSpan "GroupKeyword.hs" 3 1 3 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 1 26) [SrcSpan "GroupKeyword.hs" 1 1 1 7, SrcSpan "GroupKeyword.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 8 1 20) []) "GroupKeyword") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 1 2 39) []) (PVar (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 1 2 2) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 1 2 2) []) "a")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 39) [SrcSpan "GroupKeyword.hs" 2 3 2 4]) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 39) []) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 13) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 8) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 8) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 8) []) "map"))) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 9 2 13) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 9 2 13) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 9 2 13) []) "head")))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 14 2 15) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 14 2 15) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 14 2 15) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 39) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 21) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 21) []) "group"))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 22 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 22 2 23) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 22 2 23) []) "$"))) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 39) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 28) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 28) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 28) []) "sort"))) (EnumFromTo (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 29 2 39) [SrcSpan "GroupKeyword.hs" 2 29 2 30, SrcSpan "GroupKeyword.hs" 2 32 2 34, SrcSpan "GroupKeyword.hs" 2 38 2 39]) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 30 2 31) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 30 2 31) []) 1 "1")) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 35 2 38) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 35 2 38) []) 100 "100"))))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 5 1) [SrcSpan "RecordWildcards.hs" 1 1 1 1, SrcSpan "RecordWildcards.hs" 1 49 1 49, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 3 36 3 36, SrcSpan "RecordWildcards.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 1 49) [SrcSpan "RecordWildcards.hs" 1 1 1 13, SrcSpan "RecordWildcards.hs" 1 29 1 30, SrcSpan "RecordWildcards.hs" 1 46 1 49]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 14 1 29) []) "RecordWildCards",Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 31 1 45) []) "NamedFieldPuns"]] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 36) [SrcSpan "RecordWildcards.hs" 3 10 3 11]) (DataType (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) "Foo") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 15) []) "Foo") [FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 25) [SrcSpan "RecordWildcards.hs" 3 19 3 21]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 18) []) "a"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) "Int")))),FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 35) [SrcSpan "RecordWildcards.hs" 3 29 3 31]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 28) []) "b"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) "Int"))))])] Nothing,FunBind (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) [Match (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 4) []) "foo") [PRec (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 16) [SrcSpan "RecordWildcards.hs" 4 9 4 10, SrcSpan "RecordWildcards.hs" 4 11 4 12, SrcSpan "RecordWildcards.hs" 4 15 4 16]) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) "Foo")) [PFieldPun (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) "b"),PFieldWildcard (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 13 4 15) [])]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 17 4 20) [SrcSpan "RecordWildcards.hs" 4 17 4 18]) (Var (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) "a")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 5 1) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 1, SrcSpan "TypeOperatorsTest.hs" 1 68 1 68, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 3 29 3 29, SrcSpan "TypeOperatorsTest.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 1 68) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 13, SrcSpan "TypeOperatorsTest.hs" 1 27 1 28, SrcSpan "TypeOperatorsTest.hs" 1 45 1 46, SrcSpan "TypeOperatorsTest.hs" 1 65 1 68]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 14 1 27) []) "TypeOperators",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 29 1 45) []) "FlexibleContexts",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 47 1 64) []) "FlexibleInstances"]] [] [TypeSig (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 29) [SrcSpan "TypeOperatorsTest.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 2) []) "f"] (TyForall (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 29) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 22) [SrcSpan "TypeOperatorsTest.hs" 3 20 3 22]) (ClassA (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 19) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) "ArrowXml")) [TyCon (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) "~>"))]))) (TyInfix (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 29) []) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) "a")) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) "~>")) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) "a")))),PatBind (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 14) []) (PVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 3 4 14) [SrcSpan "TypeOperatorsTest.hs" 4 3 4 4]) (Var (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 6 1) [SrcSpan "MultiCtxt.hs" 1 1 1 1, SrcSpan "MultiCtxt.hs" 1 28 1 28, SrcSpan "MultiCtxt.hs" 3 1 3 1, SrcSpan "MultiCtxt.hs" 3 1 3 1, SrcSpan "MultiCtxt.hs" 4 37 4 37, SrcSpan "MultiCtxt.hs" 6 1 6 1]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 1 2 23) [SrcSpan "MultiCtxt.hs" 2 1 2 7, SrcSpan "MultiCtxt.hs" 2 18 2 23]) (ModuleName (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 8 2 17) []) "MultiCtxt") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 1 28) [SrcSpan "MultiCtxt.hs" 1 1 1 13, SrcSpan "MultiCtxt.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 14 1 24) []) "RankNTypes"]] [] [TypeSig (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 1 4 37) [SrcSpan "MultiCtxt.hs" 4 13 4 15]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 1 4 12) []) "multipleCtx"] (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 16 4 37) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 16 4 23) [SrcSpan "MultiCtxt.hs" 4 21 4 23]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 16 4 20) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 16 4 18) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 16 4 18) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 19 4 20) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 19 4 20) []) "a")]))) (TyParen (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 24 4 37) [SrcSpan "MultiCtxt.hs" 4 24 4 25, SrcSpan "MultiCtxt.hs" 4 36 4 37]) (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 25 4 36) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 25 4 34) [SrcSpan "MultiCtxt.hs" 4 32 4 34]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 25 4 31) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 25 4 29) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 25 4 29) []) "Show")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 30 4 31) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 30 4 31) []) "a")]))) (TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 35 4 36) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 35 4 36) []) "a"))))),PatBind (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 1 5 24) []) (PVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 1 5 12) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 1 5 12) []) "multipleCtx")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 13 5 24) [SrcSpan "MultiCtxt.hs" 5 13 5 14]) (Var (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 15 5 24) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 15 5 24) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 15 5 24) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 8 1) [SrcSpan "TypeFunctions.hs" 1 1 1 1, SrcSpan "TypeFunctions.hs" 1 46 1 46, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 3 13 3 13, SrcSpan "TypeFunctions.hs" 5 37 5 37, SrcSpan "TypeFunctions.hs" 8 1 8 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 1 46) [SrcSpan "TypeFunctions.hs" 1 1 1 13, SrcSpan "TypeFunctions.hs" 1 26 1 27, SrcSpan "TypeFunctions.hs" 1 43 1 46]) [Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 14 1 26) []) "TypeFamilies",Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 28 1 42) []) "KindSignatures"]] [] [DataDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 13) [SrcSpan "TypeFunctions.hs" 3 9 3 10]) (DataType (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) "Id") []) [QualConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) "Id") [])] Nothing,TypeFamDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 1 5 37) [SrcSpan "TypeFunctions.hs" 5 1 5 5, SrcSpan "TypeFunctions.hs" 5 6 5 12, SrcSpan "TypeFunctions.hs" 5 33 5 35]) (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 16) []) "Rep") [KindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 17 5 30) [SrcSpan "TypeFunctions.hs" 5 17 5 18, SrcSpan "TypeFunctions.hs" 5 20 5 22, SrcSpan "TypeFunctions.hs" 5 29 5 30]) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 18 5 19) []) "f") (KindFn (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 29) [SrcSpan "TypeFunctions.hs" 5 25 5 27]) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 24) [])) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 28 5 29) []))),UnkindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) "x")]) (Just (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 36 5 37) []))),TypeInsDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 1 7 27) [SrcSpan "TypeFunctions.hs" 7 1 7 5, SrcSpan "TypeFunctions.hs" 7 6 7 14, SrcSpan "TypeFunctions.hs" 7 24 7 25]) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 23) []) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 21) []) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) "Rep"))) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) "Id")))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) "x"))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) "x"))]
  ]
semiColonRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 2 1) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 3 1) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 3 1 3 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 2 17) [SrcSpan "Ex1.hs" 2 3 2 8]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 2 9 2 17) [SrcSpan "Ex1.hs" 2 9 2 10, SrcSpan "Ex1.hs" 2 16 2 17]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 16) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 12) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 2 11 2 12) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 2 13 2 16) [SrcSpan "Ex1.hs" 2 13 2 14]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 2 15 2 16) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 2 15 2 16) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 4 1) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 3 14) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 3 3 14) [SrcSpan "SimpleDeriving.hs" 3 3 3 11]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 3 12 3 14) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 3 1) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 3 1 3 1]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 2 1) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 2 1) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 2 1 2 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 2 1) [SrcSpan "EmptyAnn.hs" 1 1 1 1, SrcSpan "EmptyAnn.hs" 1 38 1 38, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1]) Nothing [AnnModulePragma (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 1 38) [SrcSpan "EmptyAnn.hs" 1 1 1 8, SrcSpan "EmptyAnn.hs" 1 35 1 38]) (Ann (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 34) []) (Ident (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 12) []) "foo") (Lit (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) (String (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) "Hlint: ignore Test4" "Hlint: ignore Test4")))] [] []
  ,Module (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 2 15) [SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 2 1 2 2, SrcSpan "EmptyList.hs" 2 14 2 15]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 1 23) [SrcSpan "EmptyList.hs" 1 1 1 7, SrcSpan "EmptyList.hs" 1 18 1 23]) (ModuleName (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 8 1 17) []) "EmptyList") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 14) []) (PVar (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 9) []) (Ident (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 9) []) "eAttrs")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 10 2 14) [SrcSpan "EmptyList.hs" 2 10 2 11]) (List (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 12 2 14) [SrcSpan "EmptyList.hs" 2 12 2 13, SrcSpan "EmptyList.hs" 2 13 2 14]) [])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 2 1) [SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 36 1 36, SrcSpan "ImportSymbol.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 1 36) [SrcSpan "ImportSymbol.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 8 1 21) []) "Data.Generics", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (ImportSpecList (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 22 1 36) [SrcSpan "ImportSymbol.hs" 1 22 1 28, SrcSpan "ImportSymbol.hs" 1 29 1 30, SrcSpan "ImportSymbol.hs" 1 35 1 36]) True [IAbs (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) (Symbol (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) ":*:")])}] []
  ,Module (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 5 1) [SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 4 17 4 18, SrcSpan "IndentedWhere.hs" 5 1 5 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 4 17) [SrcSpan "IndentedWhere.hs" 2 3 2 8]) [Match (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 4 17) [SrcSpan "IndentedWhere.hs" 2 3 2 8]) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 2) []) "f") [PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 5 1 8) [SrcSpan "IndentedWhere.hs" 1 5 1 6]) (Var (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) "g")))) (Just (BDecls (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 9 4 17) [SrcSpan "IndentedWhere.hs" 2 9 2 10, SrcSpan "IndentedWhere.hs" 3 19 3 20, SrcSpan "IndentedWhere.hs" 4 16 4 17]) [TypeSig (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 11 3 19) [SrcSpan "IndentedWhere.hs" 3 13 3 15]) [Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 11 3 12) []) "g"] (TyCon (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 16 3 19) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 16 3 19) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 3 16 3 19) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 11 4 16) []) (PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 11 4 12) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 11 4 12) []) "g")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 13 4 16) [SrcSpan "IndentedWhere.hs" 4 13 4 14]) (Lit (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 15 4 16) []) (Int (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 4 15 4 16) []) 0 "0"))) Nothing]))]]
  ,Module (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 2 1) [SrcSpan "LanguagePragma.hs" 1 1 1 1, SrcSpan "LanguagePragma.hs" 1 45 1 45, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 1 45) [SrcSpan "LanguagePragma.hs" 1 1 1 13, SrcSpan "LanguagePragma.hs" 1 27 1 28, SrcSpan "LanguagePragma.hs" 1 42 1 45]) [Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 14 1 27) []) "PatternGuards",Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 29 1 41) []) "ViewPatterns"]] [] []
  ,Module (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 2 20) [SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 2 1 2 2, SrcSpan "ParenFunBind.hs" 2 18 2 19, SrcSpan "ParenFunBind.hs" 2 19 2 20]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 1 26) [SrcSpan "ParenFunBind.hs" 1 1 1 7, SrcSpan "ParenFunBind.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 8 1 20) []) "ParenFunBind") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 18) []) [Match (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 18) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) "x"),PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 9 2 10) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 9 2 10) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 18) [SrcSpan "ParenFunBind.hs" 2 11 2 12]) (InfixApp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 18) []) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (Symbol (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) "+"))) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) "y"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 3 1) [SrcSpan "NPlusK.hs" 1 1 1 1, SrcSpan "NPlusK.hs" 1 32 1 32, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 14 2 15, SrcSpan "NPlusK.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 1 32) [SrcSpan "NPlusK.hs" 1 1 1 13, SrcSpan "NPlusK.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 14 1 28) []) "NPlusKPatterns"]] [] [FunBind (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) [Match (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 2) []) "f") [PParen (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 3 2 10) [SrcSpan "NPlusK.hs" 2 3 2 4, SrcSpan "NPlusK.hs" 2 9 2 10]) (PNPlusK (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 9) [SrcSpan "NPlusK.hs" 2 6 2 7, SrcSpan "NPlusK.hs" 2 8 2 9]) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 5) []) "n") 3)] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 11 2 14) [SrcSpan "NPlusK.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) "n")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 2 25) [SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 2 1 2 2, SrcSpan "QualifiedDot.hs" 2 24 2 25]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 1 26) [SrcSpan "QualifiedDot.hs" 1 1 1 7, SrcSpan "QualifiedDot.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 8 1 20) []) "QualifiedDot") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 24) []) (PVar (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 10) []) (Ident (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 10) []) "twoDots")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 24) [SrcSpan "QualifiedDot.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) (Qual (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) "Prelude") (Symbol (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) ".")))) Nothing]
--  ,Module (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 3 1) [SrcSpan "TupleSections.hs" 1 1 1 1, SrcSpan "TupleSections.hs" 1 31 1 31, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 20 2 21, SrcSpan "TupleSections.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 1 31) [SrcSpan "TupleSections.hs" 1 1 1 13, SrcSpan "TupleSections.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 14 1 27) []) "TupleSections"]] [] [FunBind (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 20) []) [Match (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 20) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 7 2 20) [SrcSpan "TupleSections.hs" 2 7 2 8]) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 20) []) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 18) []) (TupleSection (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 16) [SrcSpan "TupleSections.hs" 2 9 2 10, SrcSpan "TupleSections.hs" 2 11 2 12, SrcSpan "TupleSections.hs" 2 13 2 14, SrcSpan "TupleSections.hs" 2 15 2 16]) [Just (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) 1 "1")),Nothing,Nothing]) (Var (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) (UnQual (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) "x")))) (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 19 2 20) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 19 2 20) []) 3 "3")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 1 6 1) [SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 2 32 2 32, SrcSpan "EmptyInstance.hs" 4 9 4 9, SrcSpan "EmptyInstance.hs" 6 1 6 1]) Nothing [] [] [InstDecl (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 1 2 32) [SrcSpan "EmptyInstance.hs" 2 1 2 9, SrcSpan "EmptyInstance.hs" 2 27 2 32, SrcSpan "EmptyInstance.hs" 2 32 2 32, SrcSpan "EmptyInstance.hs" 2 32 2 32]) Nothing (IHead (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) "Traversable")) [TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) "Tree"))]) (Just []),TypeSig (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 9) [SrcSpan "EmptyInstance.hs" 4 3 4 5]) [Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 2) []) "x"] (TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 6) []) (PVar (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 3 5 6) [SrcSpan "EmptyInstance.hs" 5 3 5 4]) (Lit (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) (Int (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 2 30) [SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 2 1 2 2, SrcSpan "SCCPragmas.hs" 2 29 2 30]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 1 24) [SrcSpan "SCCPragmas.hs" 1 1 1 7, SrcSpan "SCCPragmas.hs" 1 19 1 24]) (ModuleName (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 8 1 18) []) "SCCPragmas") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 29) []) (PVar (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 4) []) (Ident (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 4) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 5 2 29) [SrcSpan "SCCPragmas.hs" 2 5 2 6]) (SCCPragma (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 7 2 29) [SrcSpan "SCCPragmas.hs" 2 16 2 22, SrcSpan "SCCPragmas.hs" 2 24 2 27]) "wibble" (Lit (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 28 2 29) []) (Int (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 28 2 29) []) 3 "3")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 4 14) [SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 2 1 2 2, SrcSpan "SingleClassAsst.hs" 3 26 3 27, SrcSpan "SingleClassAsst.hs" 4 12 4 13, SrcSpan "SingleClassAsst.hs" 4 13 4 14]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 1 18) [SrcSpan "SingleClassAsst.hs" 1 1 1 7, SrcSpan "SingleClassAsst.hs" 1 13 1 18]) (ModuleName (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 8 1 12) []) "Test") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 3 3 26) [SrcSpan "SingleClassAsst.hs" 3 7 3 9]) [Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 3 3 6) []) "foo"] (TyForall (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 10 3 26) []) Nothing (Just (CxParen (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 10 3 19) [SrcSpan "SingleClassAsst.hs" 3 10 3 11, SrcSpan "SingleClassAsst.hs" 3 15 3 16, SrcSpan "SingleClassAsst.hs" 3 17 3 19]) (CxSingle (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 15) []) (ClassA (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 15) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 13) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 13) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 14 3 15) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 14 3 15) []) "a")])))) (TyFun (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 26) [SrcSpan "SingleClassAsst.hs" 3 22 3 24]) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 21) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 21) []) "a")) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 25 3 26) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 25 3 26) []) "a")))),FunBind (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 12) []) [Match (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 12) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 7 4 8) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 7 4 8) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 9 4 12) [SrcSpan "SingleClassAsst.hs" 4 9 4 10]) (Var (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) "x")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 5 1) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 1, SrcSpan "UnindentedPragmaClose.hs" 1 39 1 39, SrcSpan "UnindentedPragmaClose.hs" 2 1 2 1, SrcSpan "UnindentedPragmaClose.hs" 2 1 2 1, SrcSpan "UnindentedPragmaClose.hs" 3 9 3 9, SrcSpan "UnindentedPragmaClose.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 1 39) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 13, SrcSpan "UnindentedPragmaClose.hs" 1 36 1 39]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 14 1 35) []) "MultiParamTypeClasses"]] [] [TypeSig (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 9) [SrcSpan "UnindentedPragmaClose.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 2) []) "f"] (TyCon (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (UnQual (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 6) []) (PVar (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 3 4 6) [SrcSpan "UnindentedPragmaClose.hs" 4 3 4 4]) (Lit (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) (Int (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) 4 "4"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 2 1) [SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 17) []) (PVar (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Testing.hs" 1 6 1 17) [SrcSpan "Testing.hs" 1 6 1 7]) (App (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 17) []) (Var (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (UnQual (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) "return"))) (Con (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (Special (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (UnitCon (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17])))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 2 1) [SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 23 1 23, SrcSpan "Bug.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 1 23) [SrcSpan "Bug.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "Bug.hs" 1 8 1 23) []) "Test.QuickCheck", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing}] []
  ,Module (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 2 41) [SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 2 1 2 2, SrcSpan "NestedAsPat.hs" 2 39 2 40, SrcSpan "NestedAsPat.hs" 2 40 2 41]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 1 25) [SrcSpan "NestedAsPat.hs" 1 1 1 7, SrcSpan "NestedAsPat.hs" 1 20 1 25]) (ModuleName (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 8 1 19) []) "NestedAsPat") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 39) []) [Match (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 39) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 14) []) "nestedAsPat") [PList (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 15 2 27) [SrcSpan "NestedAsPat.hs" 2 15 2 16, SrcSpan "NestedAsPat.hs" 2 26 2 27]) [PAsPat (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 16 2 26) [SrcSpan "NestedAsPat.hs" 2 17 2 18]) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 16 2 17) []) "x") (PParen (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 18 2 26) [SrcSpan "NestedAsPat.hs" 2 18 2 19, SrcSpan "NestedAsPat.hs" 2 25 2 26]) (PApp (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 25) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 23) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 23) []) "Just")) [PWildCard (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 24 2 25) [])]))]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 28 2 39) [SrcSpan "NestedAsPat.hs" 2 28 2 29]) (Var (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) "undefined")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 6 15) [SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 2 1 2 2, SrcSpan "HexPrec.hs" 3 28 3 29, SrcSpan "HexPrec.hs" 4 13 4 14, SrcSpan "HexPrec.hs" 4 14 4 15, SrcSpan "HexPrec.hs" 6 14 6 15]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 1 21) [SrcSpan "HexPrec.hs" 1 1 1 7, SrcSpan "HexPrec.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 8 1 15) []) "HexPrec") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 3 3 28) [SrcSpan "HexPrec.hs" 3 8 3 10]) [Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 3 3 7) [SrcSpan "HexPrec.hs" 3 3 3 4, SrcSpan "HexPrec.hs" 3 4 3 6, SrcSpan "HexPrec.hs" 3 6 3 7]) "%%"] (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 28) [SrcSpan "HexPrec.hs" 3 15 3 17]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) "Int"))) (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 28) [SrcSpan "HexPrec.hs" 3 22 3 24]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) "Int"))))),FunBind (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 13) []) [InfixMatch (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 13) []) (PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 4) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 4) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 5 4 7) []) "%%") [PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 8 4 9) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 8 4 9) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 10 4 13) [SrcSpan "HexPrec.hs" 4 10 4 11]) (Lit (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 12 4 13) []) (Int (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 12 4 13) []) 0 "0"))) Nothing],InfixDecl (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 3 6 14) [SrcSpan "HexPrec.hs" 6 10 6 11]) (AssocLeft (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 3 6 9) [])) (Just 2) [VarOp (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 12 6 14) []) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 12 6 14) []) "%%")]]
  ,Module (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 5 1) [SrcSpan "Rank2Types.hs" 1 1 1 1, SrcSpan "Rank2Types.hs" 1 28 1 28, SrcSpan "Rank2Types.hs" 2 1 2 1, SrcSpan "Rank2Types.hs" 2 1 2 1, SrcSpan "Rank2Types.hs" 3 37 3 37, SrcSpan "Rank2Types.hs" 4 13 4 14, SrcSpan "Rank2Types.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 1 28) [SrcSpan "Rank2Types.hs" 1 1 1 13, SrcSpan "Rank2Types.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 14 1 24) []) "Rank2Types"]] [] [TypeSig (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 37) [SrcSpan "Rank2Types.hs" 3 6 3 8]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 5) []) "test"] (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 37) [SrcSpan "Rank2Types.hs" 3 13 3 15]) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) "Int"))) (TyForall (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 16 3 37) [SrcSpan "Rank2Types.hs" 3 16 3 22, SrcSpan "Rank2Types.hs" 3 25 3 26]) (Just [UnkindedVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) "a")]) Nothing (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 37) [SrcSpan "Rank2Types.hs" 3 31 3 33]) (TyList (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 30) [SrcSpan "Rank2Types.hs" 3 27 3 28, SrcSpan "Rank2Types.hs" 3 29 3 30]) (TyVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) "a"))) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) "Int")))))),FunBind (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) [Match (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 5) []) "test") [PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 6 4 7) []),PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 8 4 9) [])] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 10 4 13) [SrcSpan "Rank2Types.hs" 4 10 4 11]) (Lit (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) (Int (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) 1 "1"))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 4 1) [SrcSpan "ReadP.hs" 1 1 1 1, SrcSpan "ReadP.hs" 1 31 1 31, SrcSpan "ReadP.hs" 2 1 2 1, SrcSpan "ReadP.hs" 2 1 2 1, SrcSpan "ReadP.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 1 31) [SrcSpan "ReadP.hs" 1 1 1 13, SrcSpan "ReadP.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 51) [SrcSpan "ReadP.hs" 3 17 3 18]) (NewType (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 14) []) "ReadP") [UnkindedVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 20) []) "R") [UnBangedTy (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyInfix (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 50) []) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 30) []) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) "forall")) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) "b"))) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) (Symbol (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) ".")) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 50) [SrcSpan "ReadP.hs" 3 44 3 46]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 43) [SrcSpan "ReadP.hs" 3 33 3 34, SrcSpan "ReadP.hs" 3 42 3 43]) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 42) [SrcSpan "ReadP.hs" 3 36 3 38]) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) "a")) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 42) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) "b"))))) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 50) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) "b"))))))])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 4 25) [SrcSpan "DataHeadParen.hs" 1 1 1 1, SrcSpan "DataHeadParen.hs" 1 31 1 31, SrcSpan "DataHeadParen.hs" 3 1 3 2, SrcSpan "DataHeadParen.hs" 4 24 4 25]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 1 2 27) [SrcSpan "DataHeadParen.hs" 2 1 2 7, SrcSpan "DataHeadParen.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 8 2 21) []) "DataHeadParen") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 1 31) [SrcSpan "DataHeadParen.hs" 1 1 1 13, SrcSpan "DataHeadParen.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 3 4 24) [SrcSpan "DataHeadParen.hs" 4 19 4 20]) (DataType (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 3 4 7) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 8 4 18) [SrcSpan "DataHeadParen.hs" 4 8 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 11, SrcSpan "DataHeadParen.hs" 4 11 4 12]) (Symbol (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 8 4 12) [SrcSpan "DataHeadParen.hs" 4 8 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 11, SrcSpan "DataHeadParen.hs" 4 11 4 12]) ":<") [UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 13 4 15) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 13 4 15) []) "a1"),UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 16 4 18) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 16 4 18) []) "a2")]) [QualConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) "Foo") [])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 4 1) [SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 2 57 2 57, SrcSpan "RecordInfixSelector.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 57) [SrcSpan "RecordInfixSelector.hs" 2 30 2 31]) (DataType (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) "RecordWithInfixSelector") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 36) []) "Cons") [FieldDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 56) [SrcSpan "RecordInfixSelector.hs" 2 43 2 45]) [Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 42) [SrcSpan "RecordInfixSelector.hs" 2 38 2 39, SrcSpan "RecordInfixSelector.hs" 2 39 2 41, SrcSpan "RecordInfixSelector.hs" 2 41 2 42]) "<>"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyFun (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) "Int")))))])] Nothing,PatBind (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 30) []) (PVar (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) "idRecord")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 10 3 30) [SrcSpan "RecordInfixSelector.hs" 3 10 3 11]) (RecConstr (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 30) [SrcSpan "RecordInfixSelector.hs" 3 17 3 18, SrcSpan "RecordInfixSelector.hs" 3 29 3 30]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) "Cons")) [FieldUpdate (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 28) [SrcSpan "RecordInfixSelector.hs" 3 24 3 25]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) (Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) "<>")) (Var (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) "id")))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 6 1) [SrcSpan "GadtDeriving.hs" 1 1 1 1, SrcSpan "GadtDeriving.hs" 1 23 1 23, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 6 1 6 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 1 23) [SrcSpan "GadtDeriving.hs" 1 1 1 13, SrcSpan "GadtDeriving.hs" 1 20 1 23]) [Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 14 1 19) []) "GADTs"]] [] [GDataDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 5 33) [SrcSpan "GadtDeriving.hs" 3 10 3 15, SrcSpan "GadtDeriving.hs" 4 9 4 10, SrcSpan "GadtDeriving.hs" 4 28 4 29]) (DataType (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) "Foo") []) Nothing [GadtDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 11 4 28) [SrcSpan "GadtDeriving.hs" 4 15 4 17]) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 11 4 14) []) "Foo") (TyFun (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 18 4 28) [SrcSpan "GadtDeriving.hs" 4 22 4 24]) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 18 4 21) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 18 4 21) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 18 4 21) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 25 4 28) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 25 4 28) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 4 25 4 28) []) "Foo"))))] (Just (Deriving (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 5 5 33) [SrcSpan "GadtDeriving.hs" 5 5 5 13, SrcSpan "GadtDeriving.hs" 5 14 5 15, SrcSpan "GadtDeriving.hs" 5 17 5 18, SrcSpan "GadtDeriving.hs" 5 22 5 23, SrcSpan "GadtDeriving.hs" 5 32 5 33]) [IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 15 5 17) []) "Eq")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 19 5 22) []) "Ord")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 5 24 5 32) []) "Typeable")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 2 18) [SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 2 1 2 2, SrcSpan "LinePragma.hs" 2 16 2 17, SrcSpan "LinePragma.hs" 2 17 2 18]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 1 21) [SrcSpan "LinePragma.hs" 1 1 1 7, SrcSpan "LinePragma.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 8 1 15) []) "Algebra") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 16) []) [Match (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 16) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 7 2 10) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 7 2 10) []) "bar")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 11 2 16) [SrcSpan "LinePragma.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) (UnQual (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) "bar")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 8 1) [SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 2 15 2 15, SrcSpan "Pragma.hs" 8 1 8 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 15) [SrcSpan "Pragma.hs" 2 10 2 11]) (DataType (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) "Bar") []) [QualConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) "Bar") [])] Nothing,InstDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 4 1 7 34) [SrcSpan "Pragma.hs" 4 1 4 9, SrcSpan "Pragma.hs" 4 17 4 22, SrcSpan "Pragma.hs" 5 9 5 10, SrcSpan "Pragma.hs" 6 30 6 31, SrcSpan "Pragma.hs" 7 33 7 34]) Nothing (IHead (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) "Eq")) [TyCon (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) "Bar"))]) (Just [InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 6 11 6 30) [SrcSpan "Pragma.hs" 6 11 6 21, SrcSpan "Pragma.hs" 6 27 6 30]) (InlineSig (SrcSpanInfo (SrcSpan "Pragma.hs" 6 11 6 30) [SrcSpan "Pragma.hs" 6 11 6 21, SrcSpan "Pragma.hs" 6 27 6 30]) True Nothing (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 6 22 6 26) [SrcSpan "Pragma.hs" 6 22 6 23, SrcSpan "Pragma.hs" 6 23 6 25, SrcSpan "Pragma.hs" 6 25 6 26]) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 6 22 6 26) [SrcSpan "Pragma.hs" 6 22 6 23, SrcSpan "Pragma.hs" 6 23 6 25, SrcSpan "Pragma.hs" 6 25 6 26]) "=="))),InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 33) [SrcSpan "Pragma.hs" 7 32 7 33]) (FunBind (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 33) [SrcSpan "Pragma.hs" 7 32 7 33]) [InfixMatch (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 32) []) (PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 12) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 11 7 12) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 7 13 7 15) []) "==") [PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 7 16 7 17) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 16 7 17) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Pragma.hs" 7 18 7 32) [SrcSpan "Pragma.hs" 7 18 7 19]) (App (SrcSpanInfo (SrcSpan "Pragma.hs" 7 20 7 32) []) (Var (SrcSpanInfo (SrcSpan "Pragma.hs" 7 20 7 25) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 7 20 7 25) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 7 20 7 25) []) "error"))) (Lit (SrcSpanInfo (SrcSpan "Pragma.hs" 7 26 7 32) []) (String (SrcSpanInfo (SrcSpan "Pragma.hs" 7 26 7 32) []) "here" "here")))) Nothing])])]
  ,Module (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 4 41) [SrcSpan "FamilyKindSig.hs" 1 1 1 1, SrcSpan "FamilyKindSig.hs" 1 30 1 30, SrcSpan "FamilyKindSig.hs" 3 1 3 2, SrcSpan "FamilyKindSig.hs" 4 40 4 41]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 1 2 27) [SrcSpan "FamilyKindSig.hs" 2 1 2 7, SrcSpan "FamilyKindSig.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 8 2 21) []) "FamilyKindSig") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 1 30) [SrcSpan "FamilyKindSig.hs" 1 1 1 13, SrcSpan "FamilyKindSig.hs" 1 27 1 30]) [Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 14 1 26) []) "TypeFamilies"]] [] [TypeFamDecl (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 3 4 40) [SrcSpan "FamilyKindSig.hs" 4 3 4 7, SrcSpan "FamilyKindSig.hs" 4 8 4 14]) (DHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 15 4 40) []) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 15 4 26) []) "WithKindSig") [KindedVar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 27 4 40) [SrcSpan "FamilyKindSig.hs" 4 27 4 28, SrcSpan "FamilyKindSig.hs" 4 30 4 32, SrcSpan "FamilyKindSig.hs" 4 39 4 40]) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 28 4 29) []) "a") (KindFn (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 33 4 39) [SrcSpan "FamilyKindSig.hs" 4 35 4 37]) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 33 4 34) [])) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 38 4 39) [])))]) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 4 1) [SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 3 44) [SrcSpan "GhcDeriving.hs" 2 25 2 26]) (NewType (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 2 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 22) []) "CodeGenModule") [UnkindedVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 30) []) "CGM") [UnBangedTy (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyParen (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 52) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 50) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 47) []) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) "StateT"))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) "CGMState")))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) "IO")))) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) "a"))))])] (Just (Deriving (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 3 3 44) [SrcSpan "GhcDeriving.hs" 3 3 3 11, SrcSpan "GhcDeriving.hs" 3 12 3 13, SrcSpan "GhcDeriving.hs" 3 18 3 19, SrcSpan "GhcDeriving.hs" 3 34 3 35, SrcSpan "GhcDeriving.hs" 3 43 3 44]) [IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 13 3 18) []) "Monad")) [],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 34) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 30) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 20 3 30) []) "MonadState")) [TyList (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 31 3 34) [SrcSpan "GhcDeriving.hs" 3 31 3 32, SrcSpan "GhcDeriving.hs" 3 33 3 34]) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 32 3 33) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 32 3 33) []) "s"))],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 3 36 3 43) []) "MonadIO")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 4 1) [SrcSpan "PackageImport.hs" 1 1 1 1, SrcSpan "PackageImport.hs" 1 32 1 32, SrcSpan "PackageImport.hs" 2 1 2 1, SrcSpan "PackageImport.hs" 2 48 2 48, SrcSpan "PackageImport.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 1 32) [SrcSpan "PackageImport.hs" 1 1 1 13, SrcSpan "PackageImport.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 14 1 28) []) "PackageImports"]] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 1 2 48) [SrcSpan "PackageImport.hs" 2 1 2 7, SrcSpan "PackageImport.hs" 2 8 2 26]), importModule = ModuleName (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 27 2 48) []) "Language.Haskell.Exts", importQualified = False, importSrc = False, importPkg = Just "haskell-src-exts", importAs = Nothing, importSpecs = Nothing}] [PatBind (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 17) []) (PVar (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 6 3 17) [SrcSpan "PackageImport.hs" 3 6 3 7]) (Var (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (UnQual (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 2 42) [SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 2 1 2 2, SrcSpan "GroupKeyword.hs" 2 41 2 42]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 1 26) [SrcSpan "GroupKeyword.hs" 1 1 1 7, SrcSpan "GroupKeyword.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 8 1 20) []) "GroupKeyword") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 41) []) (PVar (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 4) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 4) []) "a")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 41) [SrcSpan "GroupKeyword.hs" 2 5 2 6]) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 41) []) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 15) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) "map"))) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) "head")))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 41) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) "group"))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) "$"))) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 41) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) "sort"))) (EnumFromTo (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 31 2 41) [SrcSpan "GroupKeyword.hs" 2 31 2 32, SrcSpan "GroupKeyword.hs" 2 34 2 36, SrcSpan "GroupKeyword.hs" 2 40 2 41]) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 32 2 33) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 32 2 33) []) 1 "1")) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 37 2 40) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 37 2 40) []) 100 "100"))))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 5 1) [SrcSpan "RecordWildcards.hs" 1 1 1 1, SrcSpan "RecordWildcards.hs" 1 49 1 49, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 3 36 3 36, SrcSpan "RecordWildcards.hs" 4 20 4 21, SrcSpan "RecordWildcards.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 1 49) [SrcSpan "RecordWildcards.hs" 1 1 1 13, SrcSpan "RecordWildcards.hs" 1 29 1 30, SrcSpan "RecordWildcards.hs" 1 46 1 49]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 14 1 29) []) "RecordWildCards",Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 31 1 45) []) "NamedFieldPuns"]] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 36) [SrcSpan "RecordWildcards.hs" 3 10 3 11]) (DataType (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) "Foo") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 15) []) "Foo") [FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 25) [SrcSpan "RecordWildcards.hs" 3 19 3 21]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 18) []) "a"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) "Int")))),FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 35) [SrcSpan "RecordWildcards.hs" 3 29 3 31]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 28) []) "b"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) "Int"))))])] Nothing,FunBind (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) [Match (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 4) []) "foo") [PRec (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 16) [SrcSpan "RecordWildcards.hs" 4 9 4 10, SrcSpan "RecordWildcards.hs" 4 11 4 12, SrcSpan "RecordWildcards.hs" 4 15 4 16]) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) "Foo")) [PFieldPun (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) "b"),PFieldWildcard (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 13 4 15) [])]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 17 4 20) [SrcSpan "RecordWildcards.hs" 4 17 4 18]) (Var (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) "a")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 5 1) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 1, SrcSpan "TypeOperatorsTest.hs" 1 68 1 68, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 3 29 3 29, SrcSpan "TypeOperatorsTest.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 1 68) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 13, SrcSpan "TypeOperatorsTest.hs" 1 27 1 28, SrcSpan "TypeOperatorsTest.hs" 1 45 1 46, SrcSpan "TypeOperatorsTest.hs" 1 65 1 68]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 14 1 27) []) "TypeOperators",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 29 1 45) []) "FlexibleContexts",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 47 1 64) []) "FlexibleInstances"]] [] [TypeSig (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 29) [SrcSpan "TypeOperatorsTest.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 2) []) "f"] (TyForall (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 29) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 22) [SrcSpan "TypeOperatorsTest.hs" 3 20 3 22]) (ClassA (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 19) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) "ArrowXml")) [TyCon (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) "~>"))]))) (TyInfix (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 29) []) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) "a")) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) "~>")) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) "a")))),PatBind (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 14) []) (PVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 3 4 14) [SrcSpan "TypeOperatorsTest.hs" 4 3 4 4]) (Var (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 5 27) [SrcSpan "MultiCtxt.hs" 1 1 1 1, SrcSpan "MultiCtxt.hs" 1 28 1 28, SrcSpan "MultiCtxt.hs" 3 1 3 2, SrcSpan "MultiCtxt.hs" 4 39 4 40, SrcSpan "MultiCtxt.hs" 5 26 5 27]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 1 2 23) [SrcSpan "MultiCtxt.hs" 2 1 2 7, SrcSpan "MultiCtxt.hs" 2 18 2 23]) (ModuleName (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 8 2 17) []) "MultiCtxt") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 1 28) [SrcSpan "MultiCtxt.hs" 1 1 1 13, SrcSpan "MultiCtxt.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 14 1 24) []) "RankNTypes"]] [] [TypeSig (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 3 4 39) [SrcSpan "MultiCtxt.hs" 4 15 4 17]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 3 4 14) []) "multipleCtx"] (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 39) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 25) [SrcSpan "MultiCtxt.hs" 4 23 4 25]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 22) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 20) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 20) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 21 4 22) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 21 4 22) []) "a")]))) (TyParen (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 26 4 39) [SrcSpan "MultiCtxt.hs" 4 26 4 27, SrcSpan "MultiCtxt.hs" 4 38 4 39]) (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 38) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 36) [SrcSpan "MultiCtxt.hs" 4 34 4 36]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 33) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 31) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 31) []) "Show")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 32 4 33) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 32 4 33) []) "a")]))) (TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 37 4 38) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 37 4 38) []) "a"))))),PatBind (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 26) []) (PVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 14) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 14) []) "multipleCtx")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 15 5 26) [SrcSpan "MultiCtxt.hs" 5 15 5 16]) (Var (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 8 1) [SrcSpan "TypeFunctions.hs" 1 1 1 1, SrcSpan "TypeFunctions.hs" 1 46 1 46, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 3 13 3 13, SrcSpan "TypeFunctions.hs" 5 37 5 37, SrcSpan "TypeFunctions.hs" 8 1 8 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 1 46) [SrcSpan "TypeFunctions.hs" 1 1 1 13, SrcSpan "TypeFunctions.hs" 1 26 1 27, SrcSpan "TypeFunctions.hs" 1 43 1 46]) [Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 14 1 26) []) "TypeFamilies",Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 28 1 42) []) "KindSignatures"]] [] [DataDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 13) [SrcSpan "TypeFunctions.hs" 3 9 3 10]) (DataType (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) "Id") []) [QualConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) "Id") [])] Nothing,TypeFamDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 1 5 37) [SrcSpan "TypeFunctions.hs" 5 1 5 5, SrcSpan "TypeFunctions.hs" 5 6 5 12, SrcSpan "TypeFunctions.hs" 5 33 5 35]) (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 16) []) "Rep") [KindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 17 5 30) [SrcSpan "TypeFunctions.hs" 5 17 5 18, SrcSpan "TypeFunctions.hs" 5 20 5 22, SrcSpan "TypeFunctions.hs" 5 29 5 30]) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 18 5 19) []) "f") (KindFn (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 29) [SrcSpan "TypeFunctions.hs" 5 25 5 27]) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 24) [])) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 28 5 29) []))),UnkindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) "x")]) (Just (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 36 5 37) []))),TypeInsDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 1 7 27) [SrcSpan "TypeFunctions.hs" 7 1 7 5, SrcSpan "TypeFunctions.hs" 7 6 7 14, SrcSpan "TypeFunctions.hs" 7 24 7 25]) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 23) []) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 21) []) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) "Rep"))) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) "Id")))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) "x"))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) "x"))]
  ]
inlineRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 2 1) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 2 1) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 23) [SrcSpan "Ex1.hs" 1 9 1 14]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 1 15 1 23) [SrcSpan "Ex1.hs" 1 15 1 16, SrcSpan "Ex1.hs" 1 22 1 23]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 22) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 19 1 22) [SrcSpan "Ex1.hs" 1 19 1 20]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 3 1) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 3 1 3 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 23) [SrcSpan "SimpleDeriving.hs" 2 8 2 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 6 2 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 10 2 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 12 2 23) [SrcSpan "SimpleDeriving.hs" 2 12 2 20]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 2 21 2 23) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 3 1) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 3 1 3 1]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 23) [SrcSpan "EmptyContext.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 1 2 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 14 2 19) [SrcSpan "EmptyContext.hs" 2 14 2 15, SrcSpan "EmptyContext.hs" 2 15 2 16, SrcSpan "EmptyContext.hs" 2 17 2 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 20 2 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 2 22 2 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 2 1) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 2 1) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 2 1 2 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 2 1) [SrcSpan "EmptyAnn.hs" 1 1 1 1, SrcSpan "EmptyAnn.hs" 1 38 1 38, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1, SrcSpan "EmptyAnn.hs" 2 1 2 1]) Nothing [AnnModulePragma (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 1 38) [SrcSpan "EmptyAnn.hs" 1 1 1 8, SrcSpan "EmptyAnn.hs" 1 35 1 38]) (Ann (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 34) []) (Ident (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 12) []) "foo") (Lit (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) (String (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) "Hlint: ignore Test4" "Hlint: ignore Test4")))] [] []
  ,Module (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 2 15) [SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 2 1 2 2, SrcSpan "EmptyList.hs" 2 14 2 15]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 1 23) [SrcSpan "EmptyList.hs" 1 1 1 7, SrcSpan "EmptyList.hs" 1 18 1 23]) (ModuleName (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 8 1 17) []) "EmptyList") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 14) []) (PVar (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 9) []) (Ident (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 3 2 9) []) "eAttrs")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 10 2 14) [SrcSpan "EmptyList.hs" 2 10 2 11]) (List (SrcSpanInfo (SrcSpan "EmptyList.hs" 2 12 2 14) [SrcSpan "EmptyList.hs" 2 12 2 13, SrcSpan "EmptyList.hs" 2 13 2 14]) [])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 2 1) [SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 36 1 36, SrcSpan "ImportSymbol.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 1 36) [SrcSpan "ImportSymbol.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 8 1 21) []) "Data.Generics", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (ImportSpecList (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 22 1 36) [SrcSpan "ImportSymbol.hs" 1 22 1 28, SrcSpan "ImportSymbol.hs" 1 29 1 30, SrcSpan "ImportSymbol.hs" 1 35 1 36]) True [IAbs (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) (Symbol (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) ":*:")])}] []
  ,Module (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 3 1) [SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 2 25 2 26, SrcSpan "IndentedWhere.hs" 3 1 3 1]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 2 25) [SrcSpan "IndentedWhere.hs" 1 9 1 14]) [Match (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 2 25) [SrcSpan "IndentedWhere.hs" 1 9 1 14]) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 2) []) "f") [PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 5 1 8) [SrcSpan "IndentedWhere.hs" 1 5 1 6]) (Var (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) "g")))) (Just (BDecls (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 15 2 25) [SrcSpan "IndentedWhere.hs" 1 15 1 16, SrcSpan "IndentedWhere.hs" 2 17 2 18, SrcSpan "IndentedWhere.hs" 2 24 2 25]) [TypeSig (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 9 2 17) [SrcSpan "IndentedWhere.hs" 2 11 2 13]) [Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 9 2 10) []) "g"] (TyCon (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 14 2 17) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 14 2 17) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 14 2 17) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 19 2 24) []) (PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 19 2 20) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 19 2 20) []) "g")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 21 2 24) [SrcSpan "IndentedWhere.hs" 2 21 2 22]) (Lit (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 23 2 24) []) (Int (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 2 23 2 24) []) 0 "0"))) Nothing]))]]
  ,Module (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 2 1) [SrcSpan "LanguagePragma.hs" 1 1 1 1, SrcSpan "LanguagePragma.hs" 1 45 1 45, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1, SrcSpan "LanguagePragma.hs" 2 1 2 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 1 45) [SrcSpan "LanguagePragma.hs" 1 1 1 13, SrcSpan "LanguagePragma.hs" 1 27 1 28, SrcSpan "LanguagePragma.hs" 1 42 1 45]) [Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 14 1 27) []) "PatternGuards",Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 29 1 41) []) "ViewPatterns"]] [] []
  ,Module (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 2 20) [SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 2 1 2 2, SrcSpan "ParenFunBind.hs" 2 18 2 19, SrcSpan "ParenFunBind.hs" 2 19 2 20]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 1 26) [SrcSpan "ParenFunBind.hs" 1 1 1 7, SrcSpan "ParenFunBind.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 8 1 20) []) "ParenFunBind") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 18) []) [Match (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 18) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 3 2 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 7 2 8) []) "x"),PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 9 2 10) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 9 2 10) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 11 2 18) [SrcSpan "ParenFunBind.hs" 2 11 2 12]) (InfixApp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 18) []) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 13 2 14) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) (Symbol (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 15 2 16) []) "+"))) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 2 17 2 18) []) "y"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 3 1) [SrcSpan "NPlusK.hs" 1 1 1 1, SrcSpan "NPlusK.hs" 1 32 1 32, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 1 2 1, SrcSpan "NPlusK.hs" 2 14 2 15, SrcSpan "NPlusK.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 1 32) [SrcSpan "NPlusK.hs" 1 1 1 13, SrcSpan "NPlusK.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 14 1 28) []) "NPlusKPatterns"]] [] [FunBind (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) [Match (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 1 2 2) []) "f") [PParen (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 3 2 10) [SrcSpan "NPlusK.hs" 2 3 2 4, SrcSpan "NPlusK.hs" 2 9 2 10]) (PNPlusK (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 9) [SrcSpan "NPlusK.hs" 2 6 2 7, SrcSpan "NPlusK.hs" 2 8 2 9]) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 4 2 5) []) "n") 3)] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 11 2 14) [SrcSpan "NPlusK.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (UnQual (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 2 13 2 14) []) "n")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 2 25) [SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 2 1 2 2, SrcSpan "QualifiedDot.hs" 2 24 2 25]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 1 26) [SrcSpan "QualifiedDot.hs" 1 1 1 7, SrcSpan "QualifiedDot.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 8 1 20) []) "QualifiedDot") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 24) []) (PVar (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 10) []) (Ident (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 3 2 10) []) "twoDots")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 11 2 24) [SrcSpan "QualifiedDot.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) (Qual (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) "Prelude") (Symbol (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 2 13 2 24) [SrcSpan "QualifiedDot.hs" 2 13 2 14, SrcSpan "QualifiedDot.hs" 2 14 2 23, SrcSpan "QualifiedDot.hs" 2 23 2 24]) ".")))) Nothing]
--  ,Module (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 3 1) [SrcSpan "TupleSections.hs" 1 1 1 1, SrcSpan "TupleSections.hs" 1 31 1 31, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 1 2 1, SrcSpan "TupleSections.hs" 2 20 2 21, SrcSpan "TupleSections.hs" 3 1 3 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 1 31) [SrcSpan "TupleSections.hs" 1 1 1 13, SrcSpan "TupleSections.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 14 1 27) []) "TupleSections"]] [] [FunBind (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 20) []) [Match (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 20) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 1 2 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 5 2 6) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 7 2 20) [SrcSpan "TupleSections.hs" 2 7 2 8]) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 20) []) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 18) []) (TupleSection (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 9 2 16) [SrcSpan "TupleSections.hs" 2 9 2 10, SrcSpan "TupleSections.hs" 2 11 2 12, SrcSpan "TupleSections.hs" 2 13 2 14, SrcSpan "TupleSections.hs" 2 15 2 16]) [Just (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 10 2 11) []) 1 "1")),Nothing,Nothing]) (Var (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) (UnQual (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 17 2 18) []) "x")))) (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 19 2 20) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 2 19 2 20) []) 3 "3")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 1 6 1) [SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 2 32 2 32, SrcSpan "EmptyInstance.hs" 4 9 4 9, SrcSpan "EmptyInstance.hs" 6 1 6 1]) Nothing [] [] [InstDecl (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 1 2 32) [SrcSpan "EmptyInstance.hs" 2 1 2 9, SrcSpan "EmptyInstance.hs" 2 27 2 32, SrcSpan "EmptyInstance.hs" 2 32 2 32, SrcSpan "EmptyInstance.hs" 2 32 2 32]) Nothing (IHead (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 10 2 21) []) "Traversable")) [TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 2 22 2 26) []) "Tree"))]) (Just []),TypeSig (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 9) [SrcSpan "EmptyInstance.hs" 4 3 4 5]) [Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 1 4 2) []) "x"] (TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 4 6 4 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 6) []) (PVar (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 1 5 2) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 3 5 6) [SrcSpan "EmptyInstance.hs" 5 3 5 4]) (Lit (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) (Int (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 5 5 5 6) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 2 30) [SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 2 1 2 2, SrcSpan "SCCPragmas.hs" 2 29 2 30]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 1 24) [SrcSpan "SCCPragmas.hs" 1 1 1 7, SrcSpan "SCCPragmas.hs" 1 19 1 24]) (ModuleName (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 8 1 18) []) "SCCPragmas") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 29) []) (PVar (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 4) []) (Ident (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 3 2 4) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 5 2 29) [SrcSpan "SCCPragmas.hs" 2 5 2 6]) (SCCPragma (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 7 2 29) [SrcSpan "SCCPragmas.hs" 2 16 2 22, SrcSpan "SCCPragmas.hs" 2 24 2 27]) "wibble" (Lit (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 28 2 29) []) (Int (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 2 28 2 29) []) 3 "3")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 4 14) [SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 2 1 2 2, SrcSpan "SingleClassAsst.hs" 3 26 3 27, SrcSpan "SingleClassAsst.hs" 4 12 4 13, SrcSpan "SingleClassAsst.hs" 4 13 4 14]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 1 18) [SrcSpan "SingleClassAsst.hs" 1 1 1 7, SrcSpan "SingleClassAsst.hs" 1 13 1 18]) (ModuleName (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 8 1 12) []) "Test") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 3 3 26) [SrcSpan "SingleClassAsst.hs" 3 7 3 9]) [Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 3 3 6) []) "foo"] (TyForall (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 10 3 26) []) Nothing (Just (CxParen (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 10 3 19) [SrcSpan "SingleClassAsst.hs" 3 10 3 11, SrcSpan "SingleClassAsst.hs" 3 15 3 16, SrcSpan "SingleClassAsst.hs" 3 17 3 19]) (CxSingle (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 15) []) (ClassA (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 15) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 13) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 11 3 13) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 14 3 15) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 14 3 15) []) "a")])))) (TyFun (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 26) [SrcSpan "SingleClassAsst.hs" 3 22 3 24]) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 21) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 20 3 21) []) "a")) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 25 3 26) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 3 25 3 26) []) "a")))),FunBind (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 12) []) [Match (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 12) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 3 4 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 7 4 8) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 7 4 8) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 9 4 12) [SrcSpan "SingleClassAsst.hs" 4 9 4 10]) (Var (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 4 11 4 12) []) "x")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 5 1) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 1, SrcSpan "UnindentedPragmaClose.hs" 1 39 1 39, SrcSpan "UnindentedPragmaClose.hs" 2 1 2 1, SrcSpan "UnindentedPragmaClose.hs" 2 1 2 1, SrcSpan "UnindentedPragmaClose.hs" 3 9 3 9, SrcSpan "UnindentedPragmaClose.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 1 39) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 13, SrcSpan "UnindentedPragmaClose.hs" 1 36 1 39]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 14 1 35) []) "MultiParamTypeClasses"]] [] [TypeSig (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 9) [SrcSpan "UnindentedPragmaClose.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 1 3 2) []) "f"] (TyCon (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (UnQual (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 3 6 3 9) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 6) []) (PVar (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 3 4 6) [SrcSpan "UnindentedPragmaClose.hs" 4 3 4 4]) (Lit (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) (Int (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 4 5 4 6) []) 4 "4"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 2 1) [SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 2 1 2 1]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 17) []) (PVar (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Testing.hs" 1 6 1 17) [SrcSpan "Testing.hs" 1 6 1 7]) (App (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 17) []) (Var (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (UnQual (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) "return"))) (Con (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (Special (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (UnitCon (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17])))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 2 1) [SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 23 1 23, SrcSpan "Bug.hs" 2 1 2 1]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 1 23) [SrcSpan "Bug.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "Bug.hs" 1 8 1 23) []) "Test.QuickCheck", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing}] []
  ,Module (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 2 41) [SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 2 1 2 2, SrcSpan "NestedAsPat.hs" 2 39 2 40, SrcSpan "NestedAsPat.hs" 2 40 2 41]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 1 25) [SrcSpan "NestedAsPat.hs" 1 1 1 7, SrcSpan "NestedAsPat.hs" 1 20 1 25]) (ModuleName (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 8 1 19) []) "NestedAsPat") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 39) []) [Match (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 39) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 3 2 14) []) "nestedAsPat") [PList (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 15 2 27) [SrcSpan "NestedAsPat.hs" 2 15 2 16, SrcSpan "NestedAsPat.hs" 2 26 2 27]) [PAsPat (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 16 2 26) [SrcSpan "NestedAsPat.hs" 2 17 2 18]) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 16 2 17) []) "x") (PParen (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 18 2 26) [SrcSpan "NestedAsPat.hs" 2 18 2 19, SrcSpan "NestedAsPat.hs" 2 25 2 26]) (PApp (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 25) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 23) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 19 2 23) []) "Just")) [PWildCard (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 24 2 25) [])]))]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 28 2 39) [SrcSpan "NestedAsPat.hs" 2 28 2 29]) (Var (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 2 30 2 39) []) "undefined")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 6 15) [SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 2 1 2 2, SrcSpan "HexPrec.hs" 3 28 3 29, SrcSpan "HexPrec.hs" 4 13 4 14, SrcSpan "HexPrec.hs" 4 14 4 15, SrcSpan "HexPrec.hs" 6 14 6 15]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 1 21) [SrcSpan "HexPrec.hs" 1 1 1 7, SrcSpan "HexPrec.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 8 1 15) []) "HexPrec") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 3 3 28) [SrcSpan "HexPrec.hs" 3 8 3 10]) [Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 3 3 7) [SrcSpan "HexPrec.hs" 3 3 3 4, SrcSpan "HexPrec.hs" 3 4 3 6, SrcSpan "HexPrec.hs" 3 6 3 7]) "%%"] (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 28) [SrcSpan "HexPrec.hs" 3 15 3 17]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 11 3 14) []) "Int"))) (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 28) [SrcSpan "HexPrec.hs" 3 22 3 24]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 18 3 21) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 3 25 3 28) []) "Int"))))),FunBind (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 13) []) [InfixMatch (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 13) []) (PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 4) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 3 4 4) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 5 4 7) []) "%%") [PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 8 4 9) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 8 4 9) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 10 4 13) [SrcSpan "HexPrec.hs" 4 10 4 11]) (Lit (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 12 4 13) []) (Int (SrcSpanInfo (SrcSpan "HexPrec.hs" 4 12 4 13) []) 0 "0"))) Nothing],InfixDecl (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 3 6 14) [SrcSpan "HexPrec.hs" 6 10 6 11]) (AssocLeft (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 3 6 9) [])) (Just 2) [VarOp (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 12 6 14) []) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 6 12 6 14) []) "%%")]]
  ,Module (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 5 1) [SrcSpan "Rank2Types.hs" 1 1 1 1, SrcSpan "Rank2Types.hs" 1 28 1 28, SrcSpan "Rank2Types.hs" 2 1 2 1, SrcSpan "Rank2Types.hs" 2 1 2 1, SrcSpan "Rank2Types.hs" 3 37 3 37, SrcSpan "Rank2Types.hs" 4 13 4 14, SrcSpan "Rank2Types.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 1 28) [SrcSpan "Rank2Types.hs" 1 1 1 13, SrcSpan "Rank2Types.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 14 1 24) []) "Rank2Types"]] [] [TypeSig (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 37) [SrcSpan "Rank2Types.hs" 3 6 3 8]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 1 3 5) []) "test"] (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 37) [SrcSpan "Rank2Types.hs" 3 13 3 15]) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 9 3 12) []) "Int"))) (TyForall (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 16 3 37) [SrcSpan "Rank2Types.hs" 3 16 3 22, SrcSpan "Rank2Types.hs" 3 25 3 26]) (Just [UnkindedVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 23 3 24) []) "a")]) Nothing (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 37) [SrcSpan "Rank2Types.hs" 3 31 3 33]) (TyList (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 27 3 30) [SrcSpan "Rank2Types.hs" 3 27 3 28, SrcSpan "Rank2Types.hs" 3 29 3 30]) (TyVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 28 3 29) []) "a"))) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 3 34 3 37) []) "Int")))))),FunBind (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) [Match (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 13) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 1 4 5) []) "test") [PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 6 4 7) []),PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 8 4 9) [])] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 10 4 13) [SrcSpan "Rank2Types.hs" 4 10 4 11]) (Lit (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) (Int (SrcSpanInfo (SrcSpan "Rank2Types.hs" 4 12 4 13) []) 1 "1"))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 4 1) [SrcSpan "ReadP.hs" 1 1 1 1, SrcSpan "ReadP.hs" 1 31 1 31, SrcSpan "ReadP.hs" 2 1 2 1, SrcSpan "ReadP.hs" 2 1 2 1, SrcSpan "ReadP.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 1 31) [SrcSpan "ReadP.hs" 1 1 1 13, SrcSpan "ReadP.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 51) [SrcSpan "ReadP.hs" 3 17 3 18]) (NewType (SrcSpanInfo (SrcSpan "ReadP.hs" 3 1 3 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 9 3 14) []) "ReadP") [UnkindedVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 15 3 16) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 51) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 19 3 20) []) "R") [UnBangedTy (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 21 3 51) [SrcSpan "ReadP.hs" 3 21 3 22, SrcSpan "ReadP.hs" 3 50 3 51]) (TyInfix (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 50) []) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 30) []) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 22 3 28) []) "forall")) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 29 3 30) []) "b"))) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) (Symbol (SrcSpanInfo (SrcSpan "ReadP.hs" 3 31 3 32) []) ".")) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 50) [SrcSpan "ReadP.hs" 3 44 3 46]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 3 33 3 43) [SrcSpan "ReadP.hs" 3 33 3 34, SrcSpan "ReadP.hs" 3 42 3 43]) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 42) [SrcSpan "ReadP.hs" 3 36 3 38]) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 34 3 35) []) "a")) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 42) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 39 3 40) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 41 3 42) []) "b"))))) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 50) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 47 3 48) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 3 49 3 50) []) "b"))))))])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 4 25) [SrcSpan "DataHeadParen.hs" 1 1 1 1, SrcSpan "DataHeadParen.hs" 1 31 1 31, SrcSpan "DataHeadParen.hs" 3 1 3 2, SrcSpan "DataHeadParen.hs" 4 24 4 25]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 1 2 27) [SrcSpan "DataHeadParen.hs" 2 1 2 7, SrcSpan "DataHeadParen.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 2 8 2 21) []) "DataHeadParen") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 1 31) [SrcSpan "DataHeadParen.hs" 1 1 1 13, SrcSpan "DataHeadParen.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 3 4 24) [SrcSpan "DataHeadParen.hs" 4 19 4 20]) (DataType (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 3 4 7) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 8 4 18) [SrcSpan "DataHeadParen.hs" 4 8 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 11, SrcSpan "DataHeadParen.hs" 4 11 4 12]) (Symbol (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 8 4 12) [SrcSpan "DataHeadParen.hs" 4 8 4 9, SrcSpan "DataHeadParen.hs" 4 9 4 11, SrcSpan "DataHeadParen.hs" 4 11 4 12]) ":<") [UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 13 4 15) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 13 4 15) []) "a1"),UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 16 4 18) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 16 4 18) []) "a2")]) [QualConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 4 21 4 24) []) "Foo") [])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 4 1) [SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 2 57 2 57, SrcSpan "RecordInfixSelector.hs" 4 1 4 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 57) [SrcSpan "RecordInfixSelector.hs" 2 30 2 31]) (DataType (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 6 2 29) []) "RecordWithInfixSelector") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 57) [SrcSpan "RecordInfixSelector.hs" 2 37 2 38, SrcSpan "RecordInfixSelector.hs" 2 56 2 57]) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 32 2 36) []) "Cons") [FieldDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 56) [SrcSpan "RecordInfixSelector.hs" 2 43 2 45]) [Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 38 2 42) [SrcSpan "RecordInfixSelector.hs" 2 38 2 39, SrcSpan "RecordInfixSelector.hs" 2 39 2 41, SrcSpan "RecordInfixSelector.hs" 2 41 2 42]) "<>"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyFun (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 56) [SrcSpan "RecordInfixSelector.hs" 2 50 2 52]) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 46 2 49) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 2 53 2 56) []) "Int")))))])] Nothing,PatBind (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 30) []) (PVar (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 1 3 9) []) "idRecord")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 10 3 30) [SrcSpan "RecordInfixSelector.hs" 3 10 3 11]) (RecConstr (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 30) [SrcSpan "RecordInfixSelector.hs" 3 17 3 18, SrcSpan "RecordInfixSelector.hs" 3 29 3 30]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 12 3 16) []) "Cons")) [FieldUpdate (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 28) [SrcSpan "RecordInfixSelector.hs" 3 24 3 25]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) (Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 19 3 23) [SrcSpan "RecordInfixSelector.hs" 3 19 3 20, SrcSpan "RecordInfixSelector.hs" 3 20 3 22, SrcSpan "RecordInfixSelector.hs" 3 22 3 23]) "<>")) (Var (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 3 26 3 28) []) "id")))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 4 1) [SrcSpan "GadtDeriving.hs" 1 1 1 1, SrcSpan "GadtDeriving.hs" 1 23 1 23, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 2 1 2 1, SrcSpan "GadtDeriving.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 1 23) [SrcSpan "GadtDeriving.hs" 1 1 1 13, SrcSpan "GadtDeriving.hs" 1 20 1 23]) [Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 14 1 19) []) "GADTs"]] [] [GDataDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 3 65) [SrcSpan "GadtDeriving.hs" 3 10 3 15, SrcSpan "GadtDeriving.hs" 3 16 3 17, SrcSpan "GadtDeriving.hs" 3 35 3 36]) (DataType (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 6 3 9) []) "Foo") []) Nothing [GadtDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 18 3 35) [SrcSpan "GadtDeriving.hs" 3 22 3 24]) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 18 3 21) []) "Foo") (TyFun (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 25 3 35) [SrcSpan "GadtDeriving.hs" 3 29 3 31]) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 25 3 28) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 25 3 28) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 25 3 28) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 32 3 35) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 32 3 35) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 32 3 35) []) "Foo"))))] (Just (Deriving (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 37 3 65) [SrcSpan "GadtDeriving.hs" 3 37 3 45, SrcSpan "GadtDeriving.hs" 3 46 3 47, SrcSpan "GadtDeriving.hs" 3 49 3 50, SrcSpan "GadtDeriving.hs" 3 54 3 55, SrcSpan "GadtDeriving.hs" 3 64 3 65]) [IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 47 3 49) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 47 3 49) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 47 3 49) []) "Eq")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 51 3 54) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 51 3 54) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 51 3 54) []) "Ord")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 56 3 64) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 56 3 64) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 3 56 3 64) []) "Typeable")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 2 18) [SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 2 1 2 2, SrcSpan "LinePragma.hs" 2 16 2 17, SrcSpan "LinePragma.hs" 2 17 2 18]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 1 21) [SrcSpan "LinePragma.hs" 1 1 1 7, SrcSpan "LinePragma.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 8 1 15) []) "Algebra") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 16) []) [Match (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 16) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 3 2 6) []) "foo") [PVar (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 7 2 10) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 7 2 10) []) "bar")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 11 2 16) [SrcSpan "LinePragma.hs" 2 11 2 12]) (Var (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) (UnQual (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 2 13 2 16) []) "bar")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 6 1) [SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 2 15 2 15, SrcSpan "Pragma.hs" 6 1 6 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 15) [SrcSpan "Pragma.hs" 2 10 2 11]) (DataType (SrcSpanInfo (SrcSpan "Pragma.hs" 2 1 2 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 6 2 9) []) "Bar") []) [QualConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 2 12 2 15) []) "Bar") [])] Nothing,InstDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 4 1 5 53) [SrcSpan "Pragma.hs" 4 1 4 9, SrcSpan "Pragma.hs" 4 17 4 22, SrcSpan "Pragma.hs" 4 23 4 24, SrcSpan "Pragma.hs" 5 28 5 29, SrcSpan "Pragma.hs" 5 52 5 53]) Nothing (IHead (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 10 4 12) []) "Eq")) [TyCon (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 4 13 4 16) []) "Bar"))]) (Just [InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 5 9 5 28) [SrcSpan "Pragma.hs" 5 9 5 19, SrcSpan "Pragma.hs" 5 25 5 28]) (InlineSig (SrcSpanInfo (SrcSpan "Pragma.hs" 5 9 5 28) [SrcSpan "Pragma.hs" 5 9 5 19, SrcSpan "Pragma.hs" 5 25 5 28]) True Nothing (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 5 20 5 24) [SrcSpan "Pragma.hs" 5 20 5 21, SrcSpan "Pragma.hs" 5 21 5 23, SrcSpan "Pragma.hs" 5 23 5 24]) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 5 20 5 24) [SrcSpan "Pragma.hs" 5 20 5 21, SrcSpan "Pragma.hs" 5 21 5 23, SrcSpan "Pragma.hs" 5 23 5 24]) "=="))),InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 5 30 5 52) [SrcSpan "Pragma.hs" 5 51 5 52]) (FunBind (SrcSpanInfo (SrcSpan "Pragma.hs" 5 30 5 52) [SrcSpan "Pragma.hs" 5 51 5 52]) [InfixMatch (SrcSpanInfo (SrcSpan "Pragma.hs" 5 30 5 51) []) (PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 5 30 5 31) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 5 30 5 31) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 5 32 5 34) []) "==") [PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 5 35 5 36) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 5 35 5 36) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Pragma.hs" 5 37 5 51) [SrcSpan "Pragma.hs" 5 37 5 38]) (App (SrcSpanInfo (SrcSpan "Pragma.hs" 5 39 5 51) []) (Var (SrcSpanInfo (SrcSpan "Pragma.hs" 5 39 5 44) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 5 39 5 44) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 5 39 5 44) []) "error"))) (Lit (SrcSpanInfo (SrcSpan "Pragma.hs" 5 45 5 51) []) (String (SrcSpanInfo (SrcSpan "Pragma.hs" 5 45 5 51) []) "here" "here")))) Nothing])])]
  ,Module (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 4 41) [SrcSpan "FamilyKindSig.hs" 1 1 1 1, SrcSpan "FamilyKindSig.hs" 1 30 1 30, SrcSpan "FamilyKindSig.hs" 3 1 3 2, SrcSpan "FamilyKindSig.hs" 4 40 4 41]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 1 2 27) [SrcSpan "FamilyKindSig.hs" 2 1 2 7, SrcSpan "FamilyKindSig.hs" 2 22 2 27]) (ModuleName (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 2 8 2 21) []) "FamilyKindSig") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 1 30) [SrcSpan "FamilyKindSig.hs" 1 1 1 13, SrcSpan "FamilyKindSig.hs" 1 27 1 30]) [Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 14 1 26) []) "TypeFamilies"]] [] [TypeFamDecl (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 3 4 40) [SrcSpan "FamilyKindSig.hs" 4 3 4 7, SrcSpan "FamilyKindSig.hs" 4 8 4 14]) (DHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 15 4 40) []) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 15 4 26) []) "WithKindSig") [KindedVar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 27 4 40) [SrcSpan "FamilyKindSig.hs" 4 27 4 28, SrcSpan "FamilyKindSig.hs" 4 30 4 32, SrcSpan "FamilyKindSig.hs" 4 39 4 40]) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 28 4 29) []) "a") (KindFn (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 33 4 39) [SrcSpan "FamilyKindSig.hs" 4 35 4 37]) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 33 4 34) [])) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 4 38 4 39) [])))]) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 3 1) [SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 3 1 3 1]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 2 95) [SrcSpan "GhcDeriving.hs" 2 25 2 26]) (NewType (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 1 2 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 9 2 22) []) "CodeGenModule") [UnkindedVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 23 2 24) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 53) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 27 2 30) []) "CGM") [UnBangedTy (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyParen (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 31 2 53) [SrcSpan "GhcDeriving.hs" 2 31 2 32, SrcSpan "GhcDeriving.hs" 2 52 2 53]) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 52) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 50) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 47) []) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 32 2 38) []) "StateT"))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 39 2 47) []) "CGMState")))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 48 2 50) []) "IO")))) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 51 2 52) []) "a"))))])] (Just (Deriving (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 54 2 95) [SrcSpan "GhcDeriving.hs" 2 54 2 62, SrcSpan "GhcDeriving.hs" 2 63 2 64, SrcSpan "GhcDeriving.hs" 2 69 2 70, SrcSpan "GhcDeriving.hs" 2 85 2 86, SrcSpan "GhcDeriving.hs" 2 94 2 95]) [IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 64 2 69) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 64 2 69) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 64 2 69) []) "Monad")) [],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 71 2 85) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 71 2 81) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 71 2 81) []) "MonadState")) [TyList (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 82 2 85) [SrcSpan "GhcDeriving.hs" 2 82 2 83, SrcSpan "GhcDeriving.hs" 2 84 2 85]) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 83 2 84) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 83 2 84) []) "s"))],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 87 2 94) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 87 2 94) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 2 87 2 94) []) "MonadIO")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 4 1) [SrcSpan "PackageImport.hs" 1 1 1 1, SrcSpan "PackageImport.hs" 1 32 1 32, SrcSpan "PackageImport.hs" 2 1 2 1, SrcSpan "PackageImport.hs" 2 48 2 48, SrcSpan "PackageImport.hs" 4 1 4 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 1 32) [SrcSpan "PackageImport.hs" 1 1 1 13, SrcSpan "PackageImport.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 14 1 28) []) "PackageImports"]] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 1 2 48) [SrcSpan "PackageImport.hs" 2 1 2 7, SrcSpan "PackageImport.hs" 2 8 2 26]), importModule = ModuleName (SrcSpanInfo (SrcSpan "PackageImport.hs" 2 27 2 48) []) "Language.Haskell.Exts", importQualified = False, importSrc = False, importPkg = Just "haskell-src-exts", importAs = Nothing, importSpecs = Nothing}] [PatBind (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 17) []) (PVar (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 1 3 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 6 3 17) [SrcSpan "PackageImport.hs" 3 6 3 7]) (Var (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (UnQual (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 3 8 3 17) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 2 42) [SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 2 1 2 2, SrcSpan "GroupKeyword.hs" 2 41 2 42]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 1 26) [SrcSpan "GroupKeyword.hs" 1 1 1 7, SrcSpan "GroupKeyword.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 8 1 20) []) "GroupKeyword") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 41) []) (PVar (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 4) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 3 2 4) []) "a")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 5 2 41) [SrcSpan "GroupKeyword.hs" 2 5 2 6]) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 41) []) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 15) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 7 2 10) []) "map"))) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 11 2 15) []) "head")))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 16 2 17) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 41) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 18 2 23) []) "group"))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 24 2 25) []) "$"))) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 41) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 26 2 30) []) "sort"))) (EnumFromTo (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 31 2 41) [SrcSpan "GroupKeyword.hs" 2 31 2 32, SrcSpan "GroupKeyword.hs" 2 34 2 36, SrcSpan "GroupKeyword.hs" 2 40 2 41]) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 32 2 33) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 32 2 33) []) 1 "1")) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 37 2 40) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 2 37 2 40) []) 100 "100"))))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 5 1) [SrcSpan "RecordWildcards.hs" 1 1 1 1, SrcSpan "RecordWildcards.hs" 1 49 1 49, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 2 1 2 1, SrcSpan "RecordWildcards.hs" 3 36 3 36, SrcSpan "RecordWildcards.hs" 4 20 4 21, SrcSpan "RecordWildcards.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 1 49) [SrcSpan "RecordWildcards.hs" 1 1 1 13, SrcSpan "RecordWildcards.hs" 1 29 1 30, SrcSpan "RecordWildcards.hs" 1 46 1 49]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 14 1 29) []) "RecordWildCards",Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 31 1 45) []) "NamedFieldPuns"]] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 36) [SrcSpan "RecordWildcards.hs" 3 10 3 11]) (DataType (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 6 3 9) []) "Foo") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 36) [SrcSpan "RecordWildcards.hs" 3 16 3 17, SrcSpan "RecordWildcards.hs" 3 25 3 26, SrcSpan "RecordWildcards.hs" 3 35 3 36]) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 12 3 15) []) "Foo") [FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 25) [SrcSpan "RecordWildcards.hs" 3 19 3 21]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 17 3 18) []) "a"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 22 3 25) []) "Int")))),FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 35) [SrcSpan "RecordWildcards.hs" 3 29 3 31]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 27 3 28) []) "b"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 3 32 3 35) []) "Int"))))])] Nothing,FunBind (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) [Match (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 1 4 4) []) "foo") [PRec (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 16) [SrcSpan "RecordWildcards.hs" 4 9 4 10, SrcSpan "RecordWildcards.hs" 4 11 4 12, SrcSpan "RecordWildcards.hs" 4 15 4 16]) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 5 4 8) []) "Foo")) [PFieldPun (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 10 4 11) []) "b"),PFieldWildcard (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 13 4 15) [])]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 17 4 20) [SrcSpan "RecordWildcards.hs" 4 17 4 18]) (Var (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 4 19 4 20) []) "a")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 5 1) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 1, SrcSpan "TypeOperatorsTest.hs" 1 68 1 68, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 2 1 2 1, SrcSpan "TypeOperatorsTest.hs" 3 29 3 29, SrcSpan "TypeOperatorsTest.hs" 5 1 5 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 1 68) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 13, SrcSpan "TypeOperatorsTest.hs" 1 27 1 28, SrcSpan "TypeOperatorsTest.hs" 1 45 1 46, SrcSpan "TypeOperatorsTest.hs" 1 65 1 68]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 14 1 27) []) "TypeOperators",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 29 1 45) []) "FlexibleContexts",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 47 1 64) []) "FlexibleInstances"]] [] [TypeSig (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 29) [SrcSpan "TypeOperatorsTest.hs" 3 3 3 5]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 1 3 2) []) "f"] (TyForall (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 29) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 22) [SrcSpan "TypeOperatorsTest.hs" 3 20 3 22]) (ClassA (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 19) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 6 3 14) []) "ArrowXml")) [TyCon (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 15 3 19) [SrcSpan "TypeOperatorsTest.hs" 3 15 3 16, SrcSpan "TypeOperatorsTest.hs" 3 16 3 18, SrcSpan "TypeOperatorsTest.hs" 3 18 3 19]) "~>"))]))) (TyInfix (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 29) []) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 23 3 24) []) "a")) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 25 3 27) []) "~>")) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 3 28 3 29) []) "a")))),PatBind (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 14) []) (PVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 1 4 2) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 3 4 14) [SrcSpan "TypeOperatorsTest.hs" 4 3 4 4]) (Var (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 4 5 4 14) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 5 27) [SrcSpan "MultiCtxt.hs" 1 1 1 1, SrcSpan "MultiCtxt.hs" 1 28 1 28, SrcSpan "MultiCtxt.hs" 3 1 3 2, SrcSpan "MultiCtxt.hs" 4 39 4 40, SrcSpan "MultiCtxt.hs" 5 26 5 27]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 1 2 23) [SrcSpan "MultiCtxt.hs" 2 1 2 7, SrcSpan "MultiCtxt.hs" 2 18 2 23]) (ModuleName (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 2 8 2 17) []) "MultiCtxt") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 1 28) [SrcSpan "MultiCtxt.hs" 1 1 1 13, SrcSpan "MultiCtxt.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 14 1 24) []) "RankNTypes"]] [] [TypeSig (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 3 4 39) [SrcSpan "MultiCtxt.hs" 4 15 4 17]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 3 4 14) []) "multipleCtx"] (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 39) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 25) [SrcSpan "MultiCtxt.hs" 4 23 4 25]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 22) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 20) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 18 4 20) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 21 4 22) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 21 4 22) []) "a")]))) (TyParen (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 26 4 39) [SrcSpan "MultiCtxt.hs" 4 26 4 27, SrcSpan "MultiCtxt.hs" 4 38 4 39]) (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 38) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 36) [SrcSpan "MultiCtxt.hs" 4 34 4 36]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 33) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 31) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 27 4 31) []) "Show")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 32 4 33) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 32 4 33) []) "a")]))) (TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 37 4 38) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 4 37 4 38) []) "a"))))),PatBind (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 26) []) (PVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 14) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 3 5 14) []) "multipleCtx")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 15 5 26) [SrcSpan "MultiCtxt.hs" 5 15 5 16]) (Var (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 5 17 5 26) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 8 1) [SrcSpan "TypeFunctions.hs" 1 1 1 1, SrcSpan "TypeFunctions.hs" 1 46 1 46, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 2 1 2 1, SrcSpan "TypeFunctions.hs" 3 13 3 13, SrcSpan "TypeFunctions.hs" 5 37 5 37, SrcSpan "TypeFunctions.hs" 8 1 8 1]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 1 46) [SrcSpan "TypeFunctions.hs" 1 1 1 13, SrcSpan "TypeFunctions.hs" 1 26 1 27, SrcSpan "TypeFunctions.hs" 1 43 1 46]) [Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 14 1 26) []) "TypeFamilies",Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 28 1 42) []) "KindSignatures"]] [] [DataDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 13) [SrcSpan "TypeFunctions.hs" 3 9 3 10]) (DataType (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 1 3 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 6 3 8) []) "Id") []) [QualConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 3 11 3 13) []) "Id") [])] Nothing,TypeFamDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 1 5 37) [SrcSpan "TypeFunctions.hs" 5 1 5 5, SrcSpan "TypeFunctions.hs" 5 6 5 12, SrcSpan "TypeFunctions.hs" 5 33 5 35]) (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 13 5 16) []) "Rep") [KindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 17 5 30) [SrcSpan "TypeFunctions.hs" 5 17 5 18, SrcSpan "TypeFunctions.hs" 5 20 5 22, SrcSpan "TypeFunctions.hs" 5 29 5 30]) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 18 5 19) []) "f") (KindFn (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 29) [SrcSpan "TypeFunctions.hs" 5 25 5 27]) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 23 5 24) [])) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 28 5 29) []))),UnkindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 31 5 32) []) "x")]) (Just (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 5 36 5 37) []))),TypeInsDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 1 7 27) [SrcSpan "TypeFunctions.hs" 7 1 7 5, SrcSpan "TypeFunctions.hs" 7 6 7 14, SrcSpan "TypeFunctions.hs" 7 24 7 25]) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 23) []) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 21) []) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 15 7 18) []) "Rep"))) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 19 7 21) []) "Id")))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 22 7 23) []) "x"))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 7 26 7 27) []) "x"))]
  ]
noLayoutRule = [
   Module (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 10) [SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 1 1 1, SrcSpan "WithKeyword.hs" 1 10 1 10]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 9) []) (PVar (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 1 1 5) []) "with")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 6 1 9) [SrcSpan "WithKeyword.hs" 1 6 1 7]) (Lit (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) (Int (SrcSpanInfo (SrcSpan "WithKeyword.hs" 1 8 1 9) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 24) [SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 1 1 1, SrcSpan "Ex1.hs" 1 24 1 24]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 23) [SrcSpan "Ex1.hs" 1 9 1 14]) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 1 1 4) []) "yes")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 5 1 8) [SrcSpan "Ex1.hs" 1 5 1 6]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 7 1 8) []) 1 "1"))) (Just (BDecls (SrcSpanInfo (SrcSpan "Ex1.hs" 1 15 1 23) [SrcSpan "Ex1.hs" 1 15 1 16, SrcSpan "Ex1.hs" 1 22 1 23]) [PatBind (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 22) []) (PVar (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) (Ident (SrcSpanInfo (SrcSpan "Ex1.hs" 1 17 1 18) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Ex1.hs" 1 19 1 22) [SrcSpan "Ex1.hs" 1 19 1 20]) (Lit (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) (Int (SrcSpanInfo (SrcSpan "Ex1.hs" 1 21 1 22) []) 1 "1"))) Nothing]))]
  ,Module (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 24) [SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 1 1 1, SrcSpan "SimpleDeriving.hs" 1 24 1 24]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 23) [SrcSpan "SimpleDeriving.hs" 1 8 1 9]) (DataType (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 1 1 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 6 1 7) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 6 1 7) []) "T") []) [QualConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 10 1 11) []) "T") [])] (Just (Deriving (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 12 1 23) [SrcSpan "SimpleDeriving.hs" 1 12 1 20]) [IHead (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) (Ident (SrcSpanInfo (SrcSpan "SimpleDeriving.hs" 1 21 1 23) []) "Eq")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 24) [SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 1 1 1, SrcSpan "EmptyContext.hs" 1 24 1 24]) Nothing [] [] [TypeSig (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 23) [SrcSpan "EmptyContext.hs" 1 11 1 13]) [Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 1 1 10) []) "happyThen"] (TyForall (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 14 1 23) []) Nothing (Just (CxEmpty (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 14 1 19) [SrcSpan "EmptyContext.hs" 1 14 1 15, SrcSpan "EmptyContext.hs" 1 15 1 16, SrcSpan "EmptyContext.hs" 1 17 1 19]))) (TyApp (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 23) []) (TyCon (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 20 1 21) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 22 1 23) []) (Ident (SrcSpanInfo (SrcSpan "EmptyContext.hs" 1 22 1 23) []) "a"))))]
  ,Module (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 29) [SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 1 1 1, SrcSpan "ListComp1.hs" 1 29 1 29]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 28) []) (PVar (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 1 1 10) []) "copyFiles")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 11 1 28) [SrcSpan "ListComp1.hs" 1 11 1 12]) (ListComp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 13 1 28) [SrcSpan "ListComp1.hs" 1 13 1 14, SrcSpan "ListComp1.hs" 1 16 1 17, SrcSpan "ListComp1.hs" 1 27 1 28]) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 14 1 15) []) "a"))) [QualStmt (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Qualifier (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (App (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 27) []) (Var (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (UnQual (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) (Ident (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 18 1 19) []) "f"))) (LeftSection (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 20 1 27) [SrcSpan "ListComp1.hs" 1 20 1 21, SrcSpan "ListComp1.hs" 1 26 1 27]) (Lit (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) (Char (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 21 1 24) []) '.' ".")) (QConOp (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Special (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) []) (Cons (SrcSpanInfo (SrcSpan "ListComp1.hs" 1 25 1 26) [])))))))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 37) [SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 1 1 1, SrcSpan "Hyphen.hs" 1 35 1 36, SrcSpan "Hyphen.hs" 1 37 1 37]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) [Match (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 35) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 1 1 4) []) "foo") [PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 5 1 6) []) "x"),PVar (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 7 1 8) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 9 1 35) [SrcSpan "Hyphen.hs" 1 9 1 10]) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 35) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 11 1 23) []) "fromIntegral"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 24 1 25) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 35) []) (InfixApp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 31) []) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 26 1 27) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 28 1 29) []) "-"))) (Var (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 30 1 31) []) "y")))) (QVarOp (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) (Symbol (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 32 1 33) []) "+"))) (Lit (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) (Int (SrcSpanInfo (SrcSpan "Hyphen.hs" 1 34 1 35) []) 1 "1"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 1 39) [SrcSpan "EmptyAnn.hs" 1 1 1 1, SrcSpan "EmptyAnn.hs" 1 38 1 38, SrcSpan "EmptyAnn.hs" 1 39 1 39, SrcSpan "EmptyAnn.hs" 1 39 1 39, SrcSpan "EmptyAnn.hs" 1 39 1 39]) Nothing [AnnModulePragma (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 1 1 38) [SrcSpan "EmptyAnn.hs" 1 1 1 8, SrcSpan "EmptyAnn.hs" 1 35 1 38]) (Ann (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 34) []) (Ident (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 9 1 12) []) "foo") (Lit (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) (String (SrcSpanInfo (SrcSpan "EmptyAnn.hs" 1 13 1 34) []) "Hlint: ignore Test4" "Hlint: ignore Test4")))] [] []
  ,Module (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 1 38) [SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 1 1 1 1, SrcSpan "EmptyList.hs" 1 24 1 25, SrcSpan "EmptyList.hs" 1 37 1 38]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 1 1 23) [SrcSpan "EmptyList.hs" 1 1 1 7, SrcSpan "EmptyList.hs" 1 18 1 23]) (ModuleName (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 8 1 17) []) "EmptyList") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 26 1 37) []) (PVar (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 26 1 32) []) (Ident (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 26 1 32) []) "eAttrs")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 33 1 37) [SrcSpan "EmptyList.hs" 1 33 1 34]) (List (SrcSpanInfo (SrcSpan "EmptyList.hs" 1 35 1 37) [SrcSpan "EmptyList.hs" 1 35 1 36, SrcSpan "EmptyList.hs" 1 36 1 37]) [])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 1 37) [SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 1 1 1, SrcSpan "ImportSymbol.hs" 1 36 1 36, SrcSpan "ImportSymbol.hs" 1 37 1 37]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 1 1 36) [SrcSpan "ImportSymbol.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 8 1 21) []) "Data.Generics", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Just (ImportSpecList (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 22 1 36) [SrcSpan "ImportSymbol.hs" 1 22 1 28, SrcSpan "ImportSymbol.hs" 1 29 1 30, SrcSpan "ImportSymbol.hs" 1 35 1 36]) True [IAbs (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) (Symbol (SrcSpanInfo (SrcSpan "ImportSymbol.hs" 1 30 1 35) [SrcSpan "ImportSymbol.hs" 1 30 1 31, SrcSpan "ImportSymbol.hs" 1 31 1 34, SrcSpan "ImportSymbol.hs" 1 34 1 35]) ":*:")])}] []
  ,Module (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 35) [SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 1 1 1, SrcSpan "IndentedWhere.hs" 1 33 1 34, SrcSpan "IndentedWhere.hs" 1 35 1 35]) Nothing [] [] [FunBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 33) [SrcSpan "IndentedWhere.hs" 1 9 1 14]) [Match (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 33) [SrcSpan "IndentedWhere.hs" 1 9 1 14]) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 1 1 2) []) "f") [PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 3 1 4) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 5 1 8) [SrcSpan "IndentedWhere.hs" 1 5 1 6]) (Var (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 7 1 8) []) "g")))) (Just (BDecls (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 15 1 33) [SrcSpan "IndentedWhere.hs" 1 15 1 16, SrcSpan "IndentedWhere.hs" 1 25 1 26, SrcSpan "IndentedWhere.hs" 1 32 1 33]) [TypeSig (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 17 1 25) [SrcSpan "IndentedWhere.hs" 1 19 1 21]) [Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 17 1 18) []) "g"] (TyCon (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 22 1 25) []) (UnQual (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 22 1 25) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 22 1 25) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 27 1 32) []) (PVar (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 27 1 28) []) (Ident (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 27 1 28) []) "g")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 29 1 32) [SrcSpan "IndentedWhere.hs" 1 29 1 30]) (Lit (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 31 1 32) []) (Int (SrcSpanInfo (SrcSpan "IndentedWhere.hs" 1 31 1 32) []) 0 "0"))) Nothing]))]]
  ,Module (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 1 46) [SrcSpan "LanguagePragma.hs" 1 1 1 1, SrcSpan "LanguagePragma.hs" 1 45 1 45, SrcSpan "LanguagePragma.hs" 1 46 1 46, SrcSpan "LanguagePragma.hs" 1 46 1 46, SrcSpan "LanguagePragma.hs" 1 46 1 46]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 1 1 45) [SrcSpan "LanguagePragma.hs" 1 1 1 13, SrcSpan "LanguagePragma.hs" 1 27 1 28, SrcSpan "LanguagePragma.hs" 1 42 1 45]) [Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 14 1 27) []) "PatternGuards",Ident (SrcSpanInfo (SrcSpan "LanguagePragma.hs" 1 29 1 41) []) "ViewPatterns"]] [] []
  ,Module (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 1 46) [SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 1 1 1 1, SrcSpan "ParenFunBind.hs" 1 27 1 28, SrcSpan "ParenFunBind.hs" 1 44 1 45, SrcSpan "ParenFunBind.hs" 1 45 1 46]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 1 1 26) [SrcSpan "ParenFunBind.hs" 1 1 1 7, SrcSpan "ParenFunBind.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 8 1 20) []) "ParenFunBind") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 29 1 44) []) [Match (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 29 1 44) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 29 1 32) []) "foo") [PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 33 1 34) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 33 1 34) []) "x"),PVar (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 35 1 36) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 35 1 36) []) "y")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 37 1 44) [SrcSpan "ParenFunBind.hs" 1 37 1 38]) (InfixApp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 39 1 44) []) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 39 1 40) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 39 1 40) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 39 1 40) []) "x"))) (QVarOp (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 41 1 42) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 41 1 42) []) (Symbol (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 41 1 42) []) "+"))) (Var (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 43 1 44) []) (UnQual (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 43 1 44) []) (Ident (SrcSpanInfo (SrcSpan "ParenFunBind.hs" 1 43 1 44) []) "y"))))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 1 48) [SrcSpan "NPlusK.hs" 1 1 1 1, SrcSpan "NPlusK.hs" 1 32 1 32, SrcSpan "NPlusK.hs" 1 33 1 33, SrcSpan "NPlusK.hs" 1 33 1 33, SrcSpan "NPlusK.hs" 1 46 1 47, SrcSpan "NPlusK.hs" 1 48 1 48]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 1 1 32) [SrcSpan "NPlusK.hs" 1 1 1 13, SrcSpan "NPlusK.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 14 1 28) []) "NPlusKPatterns"]] [] [FunBind (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 33 1 46) []) [Match (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 33 1 46) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 33 1 34) []) "f") [PParen (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 35 1 42) [SrcSpan "NPlusK.hs" 1 35 1 36, SrcSpan "NPlusK.hs" 1 41 1 42]) (PNPlusK (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 36 1 41) [SrcSpan "NPlusK.hs" 1 38 1 39, SrcSpan "NPlusK.hs" 1 40 1 41]) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 36 1 37) []) "n") 3)] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 43 1 46) [SrcSpan "NPlusK.hs" 1 43 1 44]) (Var (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 45 1 46) []) (UnQual (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 45 1 46) []) (Ident (SrcSpanInfo (SrcSpan "NPlusK.hs" 1 45 1 46) []) "n")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 1 51) [SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 1 1 1 1, SrcSpan "QualifiedDot.hs" 1 27 1 28, SrcSpan "QualifiedDot.hs" 1 50 1 51]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 1 1 26) [SrcSpan "QualifiedDot.hs" 1 1 1 7, SrcSpan "QualifiedDot.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 8 1 20) []) "QualifiedDot") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 29 1 50) []) (PVar (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 29 1 36) []) (Ident (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 29 1 36) []) "twoDots")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 37 1 50) [SrcSpan "QualifiedDot.hs" 1 37 1 38]) (Var (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 39 1 50) [SrcSpan "QualifiedDot.hs" 1 39 1 40, SrcSpan "QualifiedDot.hs" 1 40 1 49, SrcSpan "QualifiedDot.hs" 1 49 1 50]) (Qual (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 39 1 50) [SrcSpan "QualifiedDot.hs" 1 39 1 40, SrcSpan "QualifiedDot.hs" 1 40 1 49, SrcSpan "QualifiedDot.hs" 1 49 1 50]) (ModuleName (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 39 1 50) [SrcSpan "QualifiedDot.hs" 1 39 1 40, SrcSpan "QualifiedDot.hs" 1 40 1 49, SrcSpan "QualifiedDot.hs" 1 49 1 50]) "Prelude") (Symbol (SrcSpanInfo (SrcSpan "QualifiedDot.hs" 1 39 1 50) [SrcSpan "QualifiedDot.hs" 1 39 1 40, SrcSpan "QualifiedDot.hs" 1 40 1 49, SrcSpan "QualifiedDot.hs" 1 49 1 50]) ".")))) Nothing]
--  ,Module (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 1 53) [SrcSpan "TupleSections.hs" 1 1 1 1, SrcSpan "TupleSections.hs" 1 31 1 31, SrcSpan "TupleSections.hs" 1 32 1 32, SrcSpan "TupleSections.hs" 1 32 1 32, SrcSpan "TupleSections.hs" 1 51 1 52, SrcSpan "TupleSections.hs" 1 53 1 53]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 1 1 31) [SrcSpan "TupleSections.hs" 1 1 1 13, SrcSpan "TupleSections.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 14 1 27) []) "TupleSections"]] [] [FunBind (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 32 1 51) []) [Match (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 32 1 51) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 32 1 35) []) "foo") [PVar (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 36 1 37) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 36 1 37) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 38 1 51) [SrcSpan "TupleSections.hs" 1 38 1 39]) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 40 1 51) []) (App (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 40 1 49) []) (TupleSection (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 40 1 47) [SrcSpan "TupleSections.hs" 1 40 1 41, SrcSpan "TupleSections.hs" 1 42 1 43, SrcSpan "TupleSections.hs" 1 44 1 45, SrcSpan "TupleSections.hs" 1 46 1 47]) [Just (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 41 1 42) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 41 1 42) []) 1 "1")),Nothing,Nothing]) (Var (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 48 1 49) []) (UnQual (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 48 1 49) []) (Ident (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 48 1 49) []) "x")))) (Lit (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 50 1 51) []) (Int (SrcSpanInfo (SrcSpan "TupleSections.hs" 1 50 1 51) []) 3 "3")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 1 1 48) [SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 1 1 1, SrcSpan "EmptyInstance.hs" 1 32 1 32, SrcSpan "EmptyInstance.hs" 1 41 1 41, SrcSpan "EmptyInstance.hs" 1 48 1 48]) Nothing [] [] [InstDecl (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 1 1 32) [SrcSpan "EmptyInstance.hs" 1 1 1 9, SrcSpan "EmptyInstance.hs" 1 27 1 32, SrcSpan "EmptyInstance.hs" 1 32 1 32, SrcSpan "EmptyInstance.hs" 1 32 1 32]) Nothing (IHead (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 10 1 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 10 1 21) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 10 1 21) []) "Traversable")) [TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 22 1 26) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 22 1 26) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 22 1 26) []) "Tree"))]) (Just []),TypeSig (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 33 1 41) [SrcSpan "EmptyInstance.hs" 1 35 1 37]) [Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 33 1 34) []) "x"] (TyCon (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 38 1 41) []) (UnQual (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 38 1 41) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 38 1 41) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 42 1 47) []) (PVar (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 42 1 43) []) (Ident (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 42 1 43) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 44 1 47) [SrcSpan "EmptyInstance.hs" 1 44 1 45]) (Lit (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 46 1 47) []) (Int (SrcSpanInfo (SrcSpan "EmptyInstance.hs" 1 46 1 47) []) 1 "1"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 1 54) [SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 1 1 1 1, SrcSpan "SCCPragmas.hs" 1 25 1 26, SrcSpan "SCCPragmas.hs" 1 53 1 54]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 1 1 24) [SrcSpan "SCCPragmas.hs" 1 1 1 7, SrcSpan "SCCPragmas.hs" 1 19 1 24]) (ModuleName (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 8 1 18) []) "SCCPragmas") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 27 1 53) []) (PVar (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 27 1 28) []) (Ident (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 27 1 28) []) "x")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 29 1 53) [SrcSpan "SCCPragmas.hs" 1 29 1 30]) (SCCPragma (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 31 1 53) [SrcSpan "SCCPragmas.hs" 1 40 1 46, SrcSpan "SCCPragmas.hs" 1 48 1 51]) "wibble" (Lit (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 52 1 53) []) (Int (SrcSpanInfo (SrcSpan "SCCPragmas.hs" 1 52 1 53) []) 3 "3")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 1 57) [SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 1 1 1 1, SrcSpan "SingleClassAsst.hs" 1 19 1 20, SrcSpan "SingleClassAsst.hs" 1 44 1 45, SrcSpan "SingleClassAsst.hs" 1 55 1 56, SrcSpan "SingleClassAsst.hs" 1 56 1 57]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 1 1 18) [SrcSpan "SingleClassAsst.hs" 1 1 1 7, SrcSpan "SingleClassAsst.hs" 1 13 1 18]) (ModuleName (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 8 1 12) []) "Test") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 21 1 44) [SrcSpan "SingleClassAsst.hs" 1 25 1 27]) [Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 21 1 24) []) "foo"] (TyForall (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 28 1 44) []) Nothing (Just (CxParen (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 28 1 37) [SrcSpan "SingleClassAsst.hs" 1 28 1 29, SrcSpan "SingleClassAsst.hs" 1 33 1 34, SrcSpan "SingleClassAsst.hs" 1 35 1 37]) (CxSingle (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 29 1 33) []) (ClassA (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 29 1 33) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 29 1 31) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 29 1 31) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 32 1 33) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 32 1 33) []) "a")])))) (TyFun (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 38 1 44) [SrcSpan "SingleClassAsst.hs" 1 40 1 42]) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 38 1 39) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 38 1 39) []) "a")) (TyVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 43 1 44) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 43 1 44) []) "a")))),FunBind (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 46 1 55) []) [Match (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 46 1 55) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 46 1 49) []) "foo") [PVar (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 50 1 51) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 50 1 51) []) "x")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 52 1 55) [SrcSpan "SingleClassAsst.hs" 1 52 1 53]) (Var (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 54 1 55) []) (UnQual (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 54 1 55) []) (Ident (SrcSpanInfo (SrcSpan "SingleClassAsst.hs" 1 54 1 55) []) "x")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 1 55) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 1, SrcSpan "UnindentedPragmaClose.hs" 1 39 1 39, SrcSpan "UnindentedPragmaClose.hs" 1 40 1 40, SrcSpan "UnindentedPragmaClose.hs" 1 40 1 40, SrcSpan "UnindentedPragmaClose.hs" 1 48 1 48, SrcSpan "UnindentedPragmaClose.hs" 1 55 1 55]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 1 1 39) [SrcSpan "UnindentedPragmaClose.hs" 1 1 1 13, SrcSpan "UnindentedPragmaClose.hs" 1 36 1 39]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 14 1 35) []) "MultiParamTypeClasses"]] [] [TypeSig (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 40 1 48) [SrcSpan "UnindentedPragmaClose.hs" 1 42 1 44]) [Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 40 1 41) []) "f"] (TyCon (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 45 1 48) []) (UnQual (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 45 1 48) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 45 1 48) []) "Int"))),PatBind (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 49 1 54) []) (PVar (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 49 1 50) []) (Ident (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 49 1 50) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 51 1 54) [SrcSpan "UnindentedPragmaClose.hs" 1 51 1 52]) (Lit (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 53 1 54) []) (Int (SrcSpanInfo (SrcSpan "UnindentedPragmaClose.hs" 1 53 1 54) []) 4 "4"))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 18) [SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 1 1 1, SrcSpan "Testing.hs" 1 18 1 18]) Nothing [] [] [PatBind (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 17) []) (PVar (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 1 1 5) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "Testing.hs" 1 6 1 17) [SrcSpan "Testing.hs" 1 6 1 7]) (App (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 17) []) (Var (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (UnQual (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) (Ident (SrcSpanInfo (SrcSpan "Testing.hs" 1 8 1 14) []) "return"))) (Con (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (Special (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17]) (UnitCon (SrcSpanInfo (SrcSpan "Testing.hs" 1 15 1 17) [SrcSpan "Testing.hs" 1 15 1 16, SrcSpan "Testing.hs" 1 16 1 17])))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 1 24) [SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 1 1 1, SrcSpan "Bug.hs" 1 23 1 23, SrcSpan "Bug.hs" 1 24 1 24]) Nothing [] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "Bug.hs" 1 1 1 23) [SrcSpan "Bug.hs" 1 1 1 7]), importModule = ModuleName (SrcSpanInfo (SrcSpan "Bug.hs" 1 8 1 23) []) "Test.QuickCheck", importQualified = False, importSrc = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing}] []
  ,Module (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 1 66) [SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 1 1 1 1, SrcSpan "NestedAsPat.hs" 1 26 1 27, SrcSpan "NestedAsPat.hs" 1 64 1 65, SrcSpan "NestedAsPat.hs" 1 65 1 66]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 1 1 25) [SrcSpan "NestedAsPat.hs" 1 1 1 7, SrcSpan "NestedAsPat.hs" 1 20 1 25]) (ModuleName (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 8 1 19) []) "NestedAsPat") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 28 1 64) []) [Match (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 28 1 64) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 28 1 39) []) "nestedAsPat") [PList (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 40 1 52) [SrcSpan "NestedAsPat.hs" 1 40 1 41, SrcSpan "NestedAsPat.hs" 1 51 1 52]) [PAsPat (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 41 1 51) [SrcSpan "NestedAsPat.hs" 1 42 1 43]) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 41 1 42) []) "x") (PParen (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 43 1 51) [SrcSpan "NestedAsPat.hs" 1 43 1 44, SrcSpan "NestedAsPat.hs" 1 50 1 51]) (PApp (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 44 1 50) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 44 1 48) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 44 1 48) []) "Just")) [PWildCard (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 49 1 50) [])]))]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 53 1 64) [SrcSpan "NestedAsPat.hs" 1 53 1 54]) (Var (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 55 1 64) []) (UnQual (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 55 1 64) []) (Ident (SrcSpanInfo (SrcSpan "NestedAsPat.hs" 1 55 1 64) []) "undefined")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 1 76) [SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 1 1 1 1, SrcSpan "HexPrec.hs" 1 22 1 23, SrcSpan "HexPrec.hs" 1 49 1 50, SrcSpan "HexPrec.hs" 1 61 1 62, SrcSpan "HexPrec.hs" 1 62 1 63, SrcSpan "HexPrec.hs" 1 75 1 76]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 1 1 21) [SrcSpan "HexPrec.hs" 1 1 1 7, SrcSpan "HexPrec.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 8 1 15) []) "HexPrec") Nothing Nothing)) [] [] [TypeSig (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 24 1 49) [SrcSpan "HexPrec.hs" 1 29 1 31]) [Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 24 1 28) [SrcSpan "HexPrec.hs" 1 24 1 25, SrcSpan "HexPrec.hs" 1 25 1 27, SrcSpan "HexPrec.hs" 1 27 1 28]) "%%"] (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 32 1 49) [SrcSpan "HexPrec.hs" 1 36 1 38]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 32 1 35) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 32 1 35) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 32 1 35) []) "Int"))) (TyFun (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 39 1 49) [SrcSpan "HexPrec.hs" 1 43 1 45]) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 39 1 42) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 39 1 42) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 39 1 42) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 46 1 49) []) (UnQual (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 46 1 49) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 46 1 49) []) "Int"))))),FunBind (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 51 1 61) []) [InfixMatch (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 51 1 61) []) (PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 51 1 52) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 51 1 52) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 53 1 55) []) "%%") [PVar (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 56 1 57) []) (Ident (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 56 1 57) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 58 1 61) [SrcSpan "HexPrec.hs" 1 58 1 59]) (Lit (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 60 1 61) []) (Int (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 60 1 61) []) 0 "0"))) Nothing],InfixDecl (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 64 1 75) [SrcSpan "HexPrec.hs" 1 71 1 72]) (AssocLeft (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 64 1 70) [])) (Just 2) [VarOp (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 73 1 75) []) (Symbol (SrcSpanInfo (SrcSpan "HexPrec.hs" 1 73 1 75) []) "%%")]]
  ,Module (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 1 80) [SrcSpan "Rank2Types.hs" 1 1 1 1, SrcSpan "Rank2Types.hs" 1 28 1 28, SrcSpan "Rank2Types.hs" 1 29 1 29, SrcSpan "Rank2Types.hs" 1 29 1 29, SrcSpan "Rank2Types.hs" 1 65 1 65, SrcSpan "Rank2Types.hs" 1 78 1 79, SrcSpan "Rank2Types.hs" 1 80 1 80]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 1 1 28) [SrcSpan "Rank2Types.hs" 1 1 1 13, SrcSpan "Rank2Types.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 14 1 24) []) "Rank2Types"]] [] [TypeSig (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 29 1 65) [SrcSpan "Rank2Types.hs" 1 34 1 36]) [Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 29 1 33) []) "test"] (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 37 1 65) [SrcSpan "Rank2Types.hs" 1 41 1 43]) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 37 1 40) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 37 1 40) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 37 1 40) []) "Int"))) (TyForall (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 44 1 65) [SrcSpan "Rank2Types.hs" 1 44 1 50, SrcSpan "Rank2Types.hs" 1 53 1 54]) (Just [UnkindedVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 51 1 52) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 51 1 52) []) "a")]) Nothing (TyFun (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 55 1 65) [SrcSpan "Rank2Types.hs" 1 59 1 61]) (TyList (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 55 1 58) [SrcSpan "Rank2Types.hs" 1 55 1 56, SrcSpan "Rank2Types.hs" 1 57 1 58]) (TyVar (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 56 1 57) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 56 1 57) []) "a"))) (TyCon (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 62 1 65) []) (UnQual (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 62 1 65) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 62 1 65) []) "Int")))))),FunBind (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 66 1 78) []) [Match (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 66 1 78) []) (Ident (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 66 1 70) []) "test") [PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 71 1 72) []),PWildCard (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 73 1 74) [])] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 75 1 78) [SrcSpan "Rank2Types.hs" 1 75 1 76]) (Lit (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 77 1 78) []) (Int (SrcSpanInfo (SrcSpan "Rank2Types.hs" 1 77 1 78) []) 1 "1"))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 1 83) [SrcSpan "ReadP.hs" 1 1 1 1, SrcSpan "ReadP.hs" 1 31 1 31, SrcSpan "ReadP.hs" 1 32 1 32, SrcSpan "ReadP.hs" 1 32 1 32, SrcSpan "ReadP.hs" 1 83 1 83]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "ReadP.hs" 1 1 1 31) [SrcSpan "ReadP.hs" 1 1 1 13, SrcSpan "ReadP.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 1 32 1 82) [SrcSpan "ReadP.hs" 1 48 1 49]) (NewType (SrcSpanInfo (SrcSpan "ReadP.hs" 1 32 1 39) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "ReadP.hs" 1 40 1 47) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 40 1 45) []) "ReadP") [UnkindedVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 46 1 47) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 46 1 47) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 1 50 1 82) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "ReadP.hs" 1 50 1 82) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 50 1 51) []) "R") [UnBangedTy (SrcSpanInfo (SrcSpan "ReadP.hs" 1 52 1 82) [SrcSpan "ReadP.hs" 1 52 1 53, SrcSpan "ReadP.hs" 1 81 1 82]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 1 52 1 82) [SrcSpan "ReadP.hs" 1 52 1 53, SrcSpan "ReadP.hs" 1 81 1 82]) (TyInfix (SrcSpanInfo (SrcSpan "ReadP.hs" 1 53 1 81) []) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 1 53 1 61) []) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 53 1 59) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 53 1 59) []) "forall")) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 60 1 61) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 60 1 61) []) "b"))) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 1 62 1 63) []) (Symbol (SrcSpanInfo (SrcSpan "ReadP.hs" 1 62 1 63) []) ".")) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 1 64 1 81) [SrcSpan "ReadP.hs" 1 75 1 77]) (TyParen (SrcSpanInfo (SrcSpan "ReadP.hs" 1 64 1 74) [SrcSpan "ReadP.hs" 1 64 1 65, SrcSpan "ReadP.hs" 1 73 1 74]) (TyFun (SrcSpanInfo (SrcSpan "ReadP.hs" 1 65 1 73) [SrcSpan "ReadP.hs" 1 67 1 69]) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 65 1 66) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 65 1 66) []) "a")) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 1 70 1 73) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 1 70 1 71) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 1 70 1 71) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 70 1 71) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 72 1 73) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 72 1 73) []) "b"))))) (TyApp (SrcSpanInfo (SrcSpan "ReadP.hs" 1 78 1 81) []) (TyCon (SrcSpanInfo (SrcSpan "ReadP.hs" 1 78 1 79) []) (UnQual (SrcSpanInfo (SrcSpan "ReadP.hs" 1 78 1 79) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 78 1 79) []) "P"))) (TyVar (SrcSpanInfo (SrcSpan "ReadP.hs" 1 80 1 81) []) (Ident (SrcSpanInfo (SrcSpan "ReadP.hs" 1 80 1 81) []) "b"))))))])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 1 83) [SrcSpan "DataHeadParen.hs" 1 1 1 1, SrcSpan "DataHeadParen.hs" 1 31 1 31, SrcSpan "DataHeadParen.hs" 1 59 1 60, SrcSpan "DataHeadParen.hs" 1 82 1 83]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 32 1 58) [SrcSpan "DataHeadParen.hs" 1 32 1 38, SrcSpan "DataHeadParen.hs" 1 53 1 58]) (ModuleName (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 39 1 52) []) "DataHeadParen") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 1 1 31) [SrcSpan "DataHeadParen.hs" 1 1 1 13, SrcSpan "DataHeadParen.hs" 1 28 1 31]) [Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 14 1 27) []) "TypeOperators"]] [] [DataDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 61 1 82) [SrcSpan "DataHeadParen.hs" 1 77 1 78]) (DataType (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 61 1 65) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 66 1 76) [SrcSpan "DataHeadParen.hs" 1 66 1 67, SrcSpan "DataHeadParen.hs" 1 67 1 69, SrcSpan "DataHeadParen.hs" 1 69 1 70]) (Symbol (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 66 1 70) [SrcSpan "DataHeadParen.hs" 1 66 1 67, SrcSpan "DataHeadParen.hs" 1 67 1 69, SrcSpan "DataHeadParen.hs" 1 69 1 70]) ":<") [UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 71 1 73) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 71 1 73) []) "a1"),UnkindedVar (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 74 1 76) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 74 1 76) []) "a2")]) [QualConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 79 1 82) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 79 1 82) []) (Ident (SrcSpanInfo (SrcSpan "DataHeadParen.hs" 1 79 1 82) []) "Foo") [])] Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 1 88) [SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 1 1 1, SrcSpan "RecordInfixSelector.hs" 1 57 1 57, SrcSpan "RecordInfixSelector.hs" 1 88 1 88]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 1 57) [SrcSpan "RecordInfixSelector.hs" 1 30 1 31]) (DataType (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 1 1 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 6 1 29) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 6 1 29) []) "RecordWithInfixSelector") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 32 1 57) [SrcSpan "RecordInfixSelector.hs" 1 37 1 38, SrcSpan "RecordInfixSelector.hs" 1 56 1 57]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 32 1 57) [SrcSpan "RecordInfixSelector.hs" 1 37 1 38, SrcSpan "RecordInfixSelector.hs" 1 56 1 57]) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 32 1 36) []) "Cons") [FieldDecl (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 38 1 56) [SrcSpan "RecordInfixSelector.hs" 1 43 1 45]) [Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 38 1 42) [SrcSpan "RecordInfixSelector.hs" 1 38 1 39, SrcSpan "RecordInfixSelector.hs" 1 39 1 41, SrcSpan "RecordInfixSelector.hs" 1 41 1 42]) "<>"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 46 1 56) [SrcSpan "RecordInfixSelector.hs" 1 50 1 52]) (TyFun (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 46 1 56) [SrcSpan "RecordInfixSelector.hs" 1 50 1 52]) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 46 1 49) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 46 1 49) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 46 1 49) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 53 1 56) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 53 1 56) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 53 1 56) []) "Int")))))])] Nothing,PatBind (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 58 1 87) []) (PVar (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 58 1 66) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 58 1 66) []) "idRecord")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 67 1 87) [SrcSpan "RecordInfixSelector.hs" 1 67 1 68]) (RecConstr (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 69 1 87) [SrcSpan "RecordInfixSelector.hs" 1 74 1 75, SrcSpan "RecordInfixSelector.hs" 1 86 1 87]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 69 1 73) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 69 1 73) []) "Cons")) [FieldUpdate (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 76 1 85) [SrcSpan "RecordInfixSelector.hs" 1 81 1 82]) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 76 1 80) [SrcSpan "RecordInfixSelector.hs" 1 76 1 77, SrcSpan "RecordInfixSelector.hs" 1 77 1 79, SrcSpan "RecordInfixSelector.hs" 1 79 1 80]) (Symbol (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 76 1 80) [SrcSpan "RecordInfixSelector.hs" 1 76 1 77, SrcSpan "RecordInfixSelector.hs" 1 77 1 79, SrcSpan "RecordInfixSelector.hs" 1 79 1 80]) "<>")) (Var (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 83 1 85) []) (UnQual (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 83 1 85) []) (Ident (SrcSpanInfo (SrcSpan "RecordInfixSelector.hs" 1 83 1 85) []) "id")))])) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 1 89) [SrcSpan "GadtDeriving.hs" 1 1 1 1, SrcSpan "GadtDeriving.hs" 1 23 1 23, SrcSpan "GadtDeriving.hs" 1 24 1 24, SrcSpan "GadtDeriving.hs" 1 24 1 24, SrcSpan "GadtDeriving.hs" 1 89 1 89]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 1 1 23) [SrcSpan "GadtDeriving.hs" 1 1 1 13, SrcSpan "GadtDeriving.hs" 1 20 1 23]) [Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 14 1 19) []) "GADTs"]] [] [GDataDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 24 1 88) [SrcSpan "GadtDeriving.hs" 1 33 1 38, SrcSpan "GadtDeriving.hs" 1 39 1 40, SrcSpan "GadtDeriving.hs" 1 58 1 59]) (DataType (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 24 1 28) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 29 1 32) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 29 1 32) []) "Foo") []) Nothing [GadtDecl (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 41 1 58) [SrcSpan "GadtDeriving.hs" 1 45 1 47]) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 41 1 44) []) "Foo") (TyFun (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 48 1 58) [SrcSpan "GadtDeriving.hs" 1 52 1 54]) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 48 1 51) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 48 1 51) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 48 1 51) []) "Int"))) (TyCon (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 55 1 58) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 55 1 58) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 55 1 58) []) "Foo"))))] (Just (Deriving (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 60 1 88) [SrcSpan "GadtDeriving.hs" 1 60 1 68, SrcSpan "GadtDeriving.hs" 1 69 1 70, SrcSpan "GadtDeriving.hs" 1 72 1 73, SrcSpan "GadtDeriving.hs" 1 77 1 78, SrcSpan "GadtDeriving.hs" 1 87 1 88]) [IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 70 1 72) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 70 1 72) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 70 1 72) []) "Eq")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 74 1 77) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 74 1 77) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 74 1 77) []) "Ord")) [],IHead (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 79 1 87) []) (UnQual (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 79 1 87) []) (Ident (SrcSpanInfo (SrcSpan "GadtDeriving.hs" 1 79 1 87) []) "Typeable")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 1 39) [SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 1 1 1 1, SrcSpan "LinePragma.hs" 1 22 1 23, SrcSpan "LinePragma.hs" 1 37 1 38, SrcSpan "LinePragma.hs" 1 38 1 39]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 1 1 21) [SrcSpan "LinePragma.hs" 1 1 1 7, SrcSpan "LinePragma.hs" 1 16 1 21]) (ModuleName (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 8 1 15) []) "Algebra") Nothing Nothing)) [] [] [FunBind (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 24 1 37) []) [Match (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 24 1 37) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 24 1 27) []) "foo") [PVar (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 28 1 31) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 28 1 31) []) "bar")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 32 1 37) [SrcSpan "LinePragma.hs" 1 32 1 33]) (Var (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 34 1 37) []) (UnQual (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 34 1 37) []) (Ident (SrcSpanInfo (SrcSpan "LinePragma.hs" 1 34 1 37) []) "bar")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 1 85) [SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 1 1 1, SrcSpan "Pragma.hs" 1 15 1 15, SrcSpan "Pragma.hs" 1 85 1 85]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 1 15) [SrcSpan "Pragma.hs" 1 10 1 11]) (DataType (SrcSpanInfo (SrcSpan "Pragma.hs" 1 1 1 5) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "Pragma.hs" 1 6 1 9) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 6 1 9) []) "Bar") []) [QualConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 12 1 15) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 12 1 15) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 12 1 15) []) "Bar") [])] Nothing,InstDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 16 1 84) [SrcSpan "Pragma.hs" 1 16 1 24, SrcSpan "Pragma.hs" 1 32 1 37, SrcSpan "Pragma.hs" 1 38 1 39, SrcSpan "Pragma.hs" 1 59 1 60, SrcSpan "Pragma.hs" 1 83 1 84]) Nothing (IHead (SrcSpanInfo (SrcSpan "Pragma.hs" 1 25 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 1 25 1 27) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 25 1 27) []) "Eq")) [TyCon (SrcSpanInfo (SrcSpan "Pragma.hs" 1 28 1 31) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 1 28 1 31) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 28 1 31) []) "Bar"))]) (Just [InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 40 1 59) [SrcSpan "Pragma.hs" 1 40 1 50, SrcSpan "Pragma.hs" 1 56 1 59]) (InlineSig (SrcSpanInfo (SrcSpan "Pragma.hs" 1 40 1 59) [SrcSpan "Pragma.hs" 1 40 1 50, SrcSpan "Pragma.hs" 1 56 1 59]) True Nothing (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 1 51 1 55) [SrcSpan "Pragma.hs" 1 51 1 52, SrcSpan "Pragma.hs" 1 52 1 54, SrcSpan "Pragma.hs" 1 54 1 55]) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 1 51 1 55) [SrcSpan "Pragma.hs" 1 51 1 52, SrcSpan "Pragma.hs" 1 52 1 54, SrcSpan "Pragma.hs" 1 54 1 55]) "=="))),InsDecl (SrcSpanInfo (SrcSpan "Pragma.hs" 1 61 1 83) [SrcSpan "Pragma.hs" 1 82 1 83]) (FunBind (SrcSpanInfo (SrcSpan "Pragma.hs" 1 61 1 83) [SrcSpan "Pragma.hs" 1 82 1 83]) [InfixMatch (SrcSpanInfo (SrcSpan "Pragma.hs" 1 61 1 82) []) (PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 1 61 1 62) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 61 1 62) []) "a")) (Symbol (SrcSpanInfo (SrcSpan "Pragma.hs" 1 63 1 65) []) "==") [PVar (SrcSpanInfo (SrcSpan "Pragma.hs" 1 66 1 67) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 66 1 67) []) "b")] (UnGuardedRhs (SrcSpanInfo (SrcSpan "Pragma.hs" 1 68 1 82) [SrcSpan "Pragma.hs" 1 68 1 69]) (App (SrcSpanInfo (SrcSpan "Pragma.hs" 1 70 1 82) []) (Var (SrcSpanInfo (SrcSpan "Pragma.hs" 1 70 1 75) []) (UnQual (SrcSpanInfo (SrcSpan "Pragma.hs" 1 70 1 75) []) (Ident (SrcSpanInfo (SrcSpan "Pragma.hs" 1 70 1 75) []) "error"))) (Lit (SrcSpanInfo (SrcSpan "Pragma.hs" 1 76 1 82) []) (String (SrcSpanInfo (SrcSpan "Pragma.hs" 1 76 1 82) []) "here" "here")))) Nothing])])]
  ,Module (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 1 98) [SrcSpan "FamilyKindSig.hs" 1 1 1 1, SrcSpan "FamilyKindSig.hs" 1 30 1 30, SrcSpan "FamilyKindSig.hs" 1 58 1 59, SrcSpan "FamilyKindSig.hs" 1 97 1 98]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 31 1 57) [SrcSpan "FamilyKindSig.hs" 1 31 1 37, SrcSpan "FamilyKindSig.hs" 1 52 1 57]) (ModuleName (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 38 1 51) []) "FamilyKindSig") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 1 1 30) [SrcSpan "FamilyKindSig.hs" 1 1 1 13, SrcSpan "FamilyKindSig.hs" 1 27 1 30]) [Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 14 1 26) []) "TypeFamilies"]] [] [TypeFamDecl (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 60 1 97) [SrcSpan "FamilyKindSig.hs" 1 60 1 64, SrcSpan "FamilyKindSig.hs" 1 65 1 71]) (DHead (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 72 1 97) []) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 72 1 83) []) "WithKindSig") [KindedVar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 84 1 97) [SrcSpan "FamilyKindSig.hs" 1 84 1 85, SrcSpan "FamilyKindSig.hs" 1 87 1 89, SrcSpan "FamilyKindSig.hs" 1 96 1 97]) (Ident (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 85 1 86) []) "a") (KindFn (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 90 1 96) [SrcSpan "FamilyKindSig.hs" 1 92 1 94]) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 90 1 91) [])) (KindStar (SrcSpanInfo (SrcSpan "FamilyKindSig.hs" 1 95 1 96) [])))]) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 1 96) [SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 1 1 1, SrcSpan "GhcDeriving.hs" 1 96 1 96]) Nothing [] [] [DataDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 1 95) [SrcSpan "GhcDeriving.hs" 1 25 1 26]) (NewType (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 1 1 8) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 9 1 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 9 1 22) []) "CodeGenModule") [UnkindedVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 23 1 24) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 23 1 24) []) "a")]) [QualConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 27 1 53) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 27 1 53) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 27 1 30) []) "CGM") [UnBangedTy (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 31 1 53) [SrcSpan "GhcDeriving.hs" 1 31 1 32, SrcSpan "GhcDeriving.hs" 1 52 1 53]) (TyParen (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 31 1 53) [SrcSpan "GhcDeriving.hs" 1 31 1 32, SrcSpan "GhcDeriving.hs" 1 52 1 53]) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 52) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 50) []) (TyApp (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 47) []) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 38) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 38) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 32 1 38) []) "StateT"))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 39 1 47) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 39 1 47) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 39 1 47) []) "CGMState")))) (TyCon (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 48 1 50) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 48 1 50) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 48 1 50) []) "IO")))) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 51 1 52) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 51 1 52) []) "a"))))])] (Just (Deriving (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 54 1 95) [SrcSpan "GhcDeriving.hs" 1 54 1 62, SrcSpan "GhcDeriving.hs" 1 63 1 64, SrcSpan "GhcDeriving.hs" 1 69 1 70, SrcSpan "GhcDeriving.hs" 1 85 1 86, SrcSpan "GhcDeriving.hs" 1 94 1 95]) [IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 64 1 69) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 64 1 69) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 64 1 69) []) "Monad")) [],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 71 1 85) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 71 1 81) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 71 1 81) []) "MonadState")) [TyList (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 82 1 85) [SrcSpan "GhcDeriving.hs" 1 82 1 83, SrcSpan "GhcDeriving.hs" 1 84 1 85]) (TyVar (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 83 1 84) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 83 1 84) []) "s"))],IHead (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 87 1 94) []) (UnQual (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 87 1 94) []) (Ident (SrcSpanInfo (SrcSpan "GhcDeriving.hs" 1 87 1 94) []) "MonadIO")) []]))]
  ,Module (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 1 98) [SrcSpan "PackageImport.hs" 1 1 1 1, SrcSpan "PackageImport.hs" 1 32 1 32, SrcSpan "PackageImport.hs" 1 33 1 33, SrcSpan "PackageImport.hs" 1 80 1 80, SrcSpan "PackageImport.hs" 1 98 1 98]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 1 1 32) [SrcSpan "PackageImport.hs" 1 1 1 13, SrcSpan "PackageImport.hs" 1 29 1 32]) [Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 14 1 28) []) "PackageImports"]] [ImportDecl {importAnn = (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 33 1 80) [SrcSpan "PackageImport.hs" 1 33 1 39, SrcSpan "PackageImport.hs" 1 40 1 58]), importModule = ModuleName (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 59 1 80) []) "Language.Haskell.Exts", importQualified = False, importSrc = False, importPkg = Just "haskell-src-exts", importAs = Nothing, importSpecs = Nothing}] [PatBind (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 81 1 97) []) (PVar (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 81 1 85) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 81 1 85) []) "main")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 86 1 97) [SrcSpan "PackageImport.hs" 1 86 1 87]) (Var (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 88 1 97) []) (UnQual (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 88 1 97) []) (Ident (SrcSpanInfo (SrcSpan "PackageImport.hs" 1 88 1 97) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 1 68) [SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 1 1 1 1, SrcSpan "GroupKeyword.hs" 1 27 1 28, SrcSpan "GroupKeyword.hs" 1 67 1 68]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 1 1 26) [SrcSpan "GroupKeyword.hs" 1 1 1 7, SrcSpan "GroupKeyword.hs" 1 21 1 26]) (ModuleName (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 8 1 20) []) "GroupKeyword") Nothing Nothing)) [] [] [PatBind (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 29 1 67) []) (PVar (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 29 1 30) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 29 1 30) []) "a")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 31 1 67) [SrcSpan "GroupKeyword.hs" 1 31 1 32]) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 33 1 67) []) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 33 1 41) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 33 1 36) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 33 1 36) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 33 1 36) []) "map"))) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 37 1 41) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 37 1 41) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 37 1 41) []) "head")))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 42 1 43) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 42 1 43) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 42 1 43) []) "$"))) (InfixApp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 44 1 67) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 44 1 49) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 44 1 49) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 44 1 49) []) "group"))) (QVarOp (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 50 1 51) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 50 1 51) []) (Symbol (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 50 1 51) []) "$"))) (App (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 52 1 67) []) (Var (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 52 1 56) []) (UnQual (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 52 1 56) []) (Ident (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 52 1 56) []) "sort"))) (EnumFromTo (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 57 1 67) [SrcSpan "GroupKeyword.hs" 1 57 1 58, SrcSpan "GroupKeyword.hs" 1 60 1 62, SrcSpan "GroupKeyword.hs" 1 66 1 67]) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 58 1 59) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 58 1 59) []) 1 "1")) (Lit (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 63 1 66) []) (Int (SrcSpanInfo (SrcSpan "GroupKeyword.hs" 1 63 1 66) []) 100 "100"))))))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 1 107) [SrcSpan "RecordWildcards.hs" 1 1 1 1, SrcSpan "RecordWildcards.hs" 1 49 1 49, SrcSpan "RecordWildcards.hs" 1 50 1 50, SrcSpan "RecordWildcards.hs" 1 50 1 50, SrcSpan "RecordWildcards.hs" 1 85 1 85, SrcSpan "RecordWildcards.hs" 1 105 1 106, SrcSpan "RecordWildcards.hs" 1 107 1 107]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 1 1 49) [SrcSpan "RecordWildcards.hs" 1 1 1 13, SrcSpan "RecordWildcards.hs" 1 29 1 30, SrcSpan "RecordWildcards.hs" 1 46 1 49]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 14 1 29) []) "RecordWildCards",Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 31 1 45) []) "NamedFieldPuns"]] [] [DataDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 50 1 85) [SrcSpan "RecordWildcards.hs" 1 59 1 60]) (DataType (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 50 1 54) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 55 1 58) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 55 1 58) []) "Foo") []) [QualConDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 61 1 85) [SrcSpan "RecordWildcards.hs" 1 65 1 66, SrcSpan "RecordWildcards.hs" 1 74 1 75, SrcSpan "RecordWildcards.hs" 1 84 1 85]) Nothing Nothing (RecDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 61 1 85) [SrcSpan "RecordWildcards.hs" 1 65 1 66, SrcSpan "RecordWildcards.hs" 1 74 1 75, SrcSpan "RecordWildcards.hs" 1 84 1 85]) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 61 1 64) []) "Foo") [FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 66 1 74) [SrcSpan "RecordWildcards.hs" 1 68 1 70]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 66 1 67) []) "a"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 71 1 74) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 71 1 74) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 71 1 74) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 71 1 74) []) "Int")))),FieldDecl (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 76 1 84) [SrcSpan "RecordWildcards.hs" 1 78 1 80]) [Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 76 1 77) []) "b"] (UnBangedTy (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 81 1 84) []) (TyCon (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 81 1 84) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 81 1 84) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 81 1 84) []) "Int"))))])] Nothing,FunBind (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 86 1 105) []) [Match (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 86 1 105) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 86 1 89) []) "foo") [PRec (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 90 1 101) [SrcSpan "RecordWildcards.hs" 1 94 1 95, SrcSpan "RecordWildcards.hs" 1 96 1 97, SrcSpan "RecordWildcards.hs" 1 100 1 101]) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 90 1 93) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 90 1 93) []) "Foo")) [PFieldPun (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 95 1 96) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 95 1 96) []) "b"),PFieldWildcard (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 98 1 100) [])]] (UnGuardedRhs (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 102 1 105) [SrcSpan "RecordWildcards.hs" 1 102 1 103]) (Var (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 104 1 105) []) (UnQual (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 104 1 105) []) (Ident (SrcSpanInfo (SrcSpan "RecordWildcards.hs" 1 104 1 105) []) "a")))) Nothing]]
  ,Module (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 1 112) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 1, SrcSpan "TypeOperatorsTest.hs" 1 68 1 68, SrcSpan "TypeOperatorsTest.hs" 1 69 1 69, SrcSpan "TypeOperatorsTest.hs" 1 69 1 69, SrcSpan "TypeOperatorsTest.hs" 1 97 1 97, SrcSpan "TypeOperatorsTest.hs" 1 112 1 112]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 1 1 68) [SrcSpan "TypeOperatorsTest.hs" 1 1 1 13, SrcSpan "TypeOperatorsTest.hs" 1 27 1 28, SrcSpan "TypeOperatorsTest.hs" 1 45 1 46, SrcSpan "TypeOperatorsTest.hs" 1 65 1 68]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 14 1 27) []) "TypeOperators",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 29 1 45) []) "FlexibleContexts",Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 47 1 64) []) "FlexibleInstances"]] [] [TypeSig (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 69 1 97) [SrcSpan "TypeOperatorsTest.hs" 1 71 1 73]) [Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 69 1 70) []) "f"] (TyForall (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 74 1 97) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 74 1 90) [SrcSpan "TypeOperatorsTest.hs" 1 88 1 90]) (ClassA (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 74 1 87) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 74 1 82) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 74 1 82) []) "ArrowXml")) [TyCon (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 83 1 87) [SrcSpan "TypeOperatorsTest.hs" 1 83 1 84, SrcSpan "TypeOperatorsTest.hs" 1 84 1 86, SrcSpan "TypeOperatorsTest.hs" 1 86 1 87]) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 83 1 87) [SrcSpan "TypeOperatorsTest.hs" 1 83 1 84, SrcSpan "TypeOperatorsTest.hs" 1 84 1 86, SrcSpan "TypeOperatorsTest.hs" 1 86 1 87]) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 83 1 87) [SrcSpan "TypeOperatorsTest.hs" 1 83 1 84, SrcSpan "TypeOperatorsTest.hs" 1 84 1 86, SrcSpan "TypeOperatorsTest.hs" 1 86 1 87]) "~>"))]))) (TyInfix (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 91 1 97) []) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 91 1 92) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 91 1 92) []) "a")) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 93 1 95) []) (Symbol (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 93 1 95) []) "~>")) (TyVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 96 1 97) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 96 1 97) []) "a")))),PatBind (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 98 1 111) []) (PVar (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 98 1 99) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 98 1 99) []) "f")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 100 1 111) [SrcSpan "TypeOperatorsTest.hs" 1 100 1 101]) (Var (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 102 1 111) []) (UnQual (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 102 1 111) []) (Ident (SrcSpanInfo (SrcSpan "TypeOperatorsTest.hs" 1 102 1 111) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 1 116) [SrcSpan "MultiCtxt.hs" 1 1 1 1, SrcSpan "MultiCtxt.hs" 1 28 1 28, SrcSpan "MultiCtxt.hs" 1 52 1 53, SrcSpan "MultiCtxt.hs" 1 90 1 91, SrcSpan "MultiCtxt.hs" 1 115 1 116]) (Just (ModuleHead (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 29 1 51) [SrcSpan "MultiCtxt.hs" 1 29 1 35, SrcSpan "MultiCtxt.hs" 1 46 1 51]) (ModuleName (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 36 1 45) []) "MultiCtxt") Nothing Nothing)) [LanguagePragma (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 1 1 28) [SrcSpan "MultiCtxt.hs" 1 1 1 13, SrcSpan "MultiCtxt.hs" 1 25 1 28]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 14 1 24) []) "RankNTypes"]] [] [TypeSig (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 54 1 90) [SrcSpan "MultiCtxt.hs" 1 66 1 68]) [Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 54 1 65) []) "multipleCtx"] (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 69 1 90) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 69 1 76) [SrcSpan "MultiCtxt.hs" 1 74 1 76]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 69 1 73) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 69 1 71) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 69 1 71) []) "Eq")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 72 1 73) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 72 1 73) []) "a")]))) (TyParen (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 77 1 90) [SrcSpan "MultiCtxt.hs" 1 77 1 78, SrcSpan "MultiCtxt.hs" 1 89 1 90]) (TyForall (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 78 1 89) []) Nothing (Just (CxSingle (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 78 1 87) [SrcSpan "MultiCtxt.hs" 1 85 1 87]) (ClassA (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 78 1 84) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 78 1 82) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 78 1 82) []) "Show")) [TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 83 1 84) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 83 1 84) []) "a")]))) (TyVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 88 1 89) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 88 1 89) []) "a"))))),PatBind (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 92 1 115) []) (PVar (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 92 1 103) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 92 1 103) []) "multipleCtx")) Nothing (UnGuardedRhs (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 104 1 115) [SrcSpan "MultiCtxt.hs" 1 104 1 105]) (Var (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 106 1 115) []) (UnQual (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 106 1 115) []) (Ident (SrcSpanInfo (SrcSpan "MultiCtxt.hs" 1 106 1 115) []) "undefined")))) Nothing]
  ,Module (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 1 124) [SrcSpan "TypeFunctions.hs" 1 1 1 1, SrcSpan "TypeFunctions.hs" 1 46 1 46, SrcSpan "TypeFunctions.hs" 1 47 1 47, SrcSpan "TypeFunctions.hs" 1 47 1 47, SrcSpan "TypeFunctions.hs" 1 59 1 59, SrcSpan "TypeFunctions.hs" 1 96 1 96, SrcSpan "TypeFunctions.hs" 1 124 1 124]) Nothing [LanguagePragma (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 1 1 46) [SrcSpan "TypeFunctions.hs" 1 1 1 13, SrcSpan "TypeFunctions.hs" 1 26 1 27, SrcSpan "TypeFunctions.hs" 1 43 1 46]) [Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 14 1 26) []) "TypeFamilies",Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 28 1 42) []) "KindSignatures"]] [] [DataDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 47 1 59) [SrcSpan "TypeFunctions.hs" 1 55 1 56]) (DataType (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 47 1 51) [])) Nothing (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 52 1 54) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 52 1 54) []) "Id") []) [QualConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 57 1 59) []) Nothing Nothing (ConDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 57 1 59) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 57 1 59) []) "Id") [])] Nothing,TypeFamDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 60 1 96) [SrcSpan "TypeFunctions.hs" 1 60 1 64, SrcSpan "TypeFunctions.hs" 1 65 1 71, SrcSpan "TypeFunctions.hs" 1 92 1 94]) (DHead (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 72 1 91) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 72 1 75) []) "Rep") [KindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 76 1 89) [SrcSpan "TypeFunctions.hs" 1 76 1 77, SrcSpan "TypeFunctions.hs" 1 79 1 81, SrcSpan "TypeFunctions.hs" 1 88 1 89]) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 77 1 78) []) "f") (KindFn (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 82 1 88) [SrcSpan "TypeFunctions.hs" 1 84 1 86]) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 82 1 83) [])) (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 87 1 88) []))),UnkindedVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 90 1 91) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 90 1 91) []) "x")]) (Just (KindStar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 95 1 96) []))),TypeInsDecl (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 97 1 123) [SrcSpan "TypeFunctions.hs" 1 97 1 101, SrcSpan "TypeFunctions.hs" 1 102 1 110, SrcSpan "TypeFunctions.hs" 1 120 1 121]) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 111 1 119) []) (TyApp (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 111 1 117) []) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 111 1 114) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 111 1 114) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 111 1 114) []) "Rep"))) (TyCon (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 115 1 117) []) (UnQual (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 115 1 117) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 115 1 117) []) "Id")))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 118 1 119) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 118 1 119) []) "x"))) (TyVar (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 122 1 123) []) (Ident (SrcSpanInfo (SrcSpan "TypeFunctions.hs" 1 122 1 123) []) "x"))]
  ]
